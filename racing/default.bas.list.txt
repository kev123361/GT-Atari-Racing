------- FILE C:\Users\kev12\Documents\GT\IntroCM\Project6\racing\default.bas.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE C:\Users\kev12\Documents\GT\IntroCM\Project6\racing\default.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE C:\Users\kev12\Documents\GT\IntroCM\Project6\racing\default.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d					      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e					      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298					      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 01	    pfscore    =	1
      4  10000 ????
      5  10000 ????		00 01	    PFcolors   =	1
      6  10000 ????		00 01	    player1colors =	1
      7  10000 ????		00 01	    playercolors =	1
      8  10000 ????		00 01	    player1colors =	1
------- FILE 2600basic.h
      5  10000 ????
      6  10000 ????		00 80	    player0x   =	$80
      7  10000 ????		00 81	    player1x   =	$81
      8  10000 ????		00 82	    missile0x  =	$82
      9  10000 ????		00 83	    missile1x  =	$83
     10  10000 ????		00 84	    ballx      =	$84
     11  10000 ????
     12  10000 ????		00 85	    objecty    =	$85
     13  10000 ????		00 85	    player0y   =	$85
     14  10000 ????		00 86	    player1y   =	$86
     15  10000 ????		00 87	    missile1height =	$87
     16  10000 ????		00 88	    missile1y  =	$88
     17  10000 ????		00 89	    bally      =	$89
     18  10000 ????
     19  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     20  10000 ????
     21  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     22  10000 ????		00 8a	    player0pointerlo =	$8A
     23  10000 ????		00 8b	    player0pointerhi =	$8B
     24  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     25  10000 ????		00 8c	    player1pointerlo =	$8C
     26  10000 ????		00 8d	    player1pointerhi =	$8D
     27  10000 ????
     28  10000 ????		00 8e	    player0height =	$8E
     29  10000 ????		00 8f	    player1height =	$8F
     30  10000 ????		00 90	    missile0height =	$90
     31  10000 ????		00 91	    missile0y  =	$91
     32  10000 ????		00 92	    ballheight =	$92
     33  10000 ????
     34  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     35  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     36  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     37  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     38  10000 ????
     39  10000 ????		00 93	    score      =	$93	; $93-$95
     40  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     41  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     42  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     43  10000 ????		00 9e	    temp3      =	$9E
     44  10000 ????		00 9f	    temp4      =	$9F
     45  10000 ????		00 a0	    temp5      =	$A0
     46  10000 ????		00 a1	    temp6      =	$A1
     47  10000 ????
     48  10000 ????		00 a2	    rand       =	$A2
     49  10000 ????		00 a3	    scorecolor =	$A3
     50  10000 ????
     51  10000 ????		00 a4	    var0       =	$A4
     52  10000 ????		00 a5	    var1       =	$A5
     53  10000 ????		00 a6	    var2       =	$A6
     54  10000 ????		00 a7	    var3       =	$A7
     55  10000 ????		00 a8	    var4       =	$A8
     56  10000 ????		00 a9	    var5       =	$A9
     57  10000 ????		00 aa	    var6       =	$AA
     58  10000 ????		00 ab	    var7       =	$AB
     59  10000 ????		00 ac	    var8       =	$AC
     60  10000 ????		00 ad	    var9       =	$AD
     61  10000 ????		00 ae	    var10      =	$AE
     62  10000 ????		00 af	    var11      =	$AF
     63  10000 ????		00 b0	    var12      =	$B0
     64  10000 ????		00 b1	    var13      =	$B1
     65  10000 ????		00 b2	    var14      =	$B2
     66  10000 ????		00 b3	    var15      =	$B3
     67  10000 ????		00 b4	    var16      =	$B4
     68  10000 ????		00 b5	    var17      =	$B5
     69  10000 ????		00 b6	    var18      =	$B6
     70  10000 ????		00 b7	    var19      =	$B7
     71  10000 ????		00 b8	    var20      =	$B8
     72  10000 ????		00 b9	    var21      =	$B9
     73  10000 ????		00 ba	    var22      =	$BA
     74  10000 ????		00 bb	    var23      =	$BB
     75  10000 ????		00 bc	    var24      =	$BC
     76  10000 ????		00 bd	    var25      =	$BD
     77  10000 ????		00 be	    var26      =	$BE
     78  10000 ????		00 bf	    var27      =	$BF
     79  10000 ????		00 c0	    var28      =	$C0
     80  10000 ????		00 c1	    var29      =	$C1
     81  10000 ????		00 c2	    var30      =	$C2
     82  10000 ????		00 c3	    var31      =	$C3
     83  10000 ????		00 c4	    var32      =	$C4
     84  10000 ????		00 c5	    var33      =	$C5
     85  10000 ????		00 c6	    var34      =	$C6
     86  10000 ????		00 c7	    var35      =	$C7
     87  10000 ????		00 c8	    var36      =	$C8
     88  10000 ????		00 c9	    var37      =	$C9
     89  10000 ????		00 ca	    var38      =	$CA
     90  10000 ????		00 cb	    var39      =	$CB
     91  10000 ????		00 cc	    var40      =	$CC
     92  10000 ????		00 cd	    var41      =	$CD
     93  10000 ????		00 ce	    var42      =	$CE
     94  10000 ????		00 cf	    var43      =	$CF
     95  10000 ????		00 d0	    var44      =	$D0
     96  10000 ????		00 d1	    var45      =	$D1
     97  10000 ????		00 d2	    var46      =	$D2
     98  10000 ????		00 d3	    var47      =	$D3
     99  10000 ????
    100  10000 ????		00 d4	    A	       =	$d4
    101  10000 ????		00 d4	    a	       =	$d4
    102  10000 ????		00 d5	    B	       =	$d5
    103  10000 ????		00 d5	    b	       =	$d5
    104  10000 ????		00 d6	    C	       =	$d6
    105  10000 ????		00 d6	    c	       =	$d6
    106  10000 ????		00 d7	    D	       =	$d7
    107  10000 ????		00 d7	    d	       =	$d7
    108  10000 ????		00 d8	    E	       =	$d8
    109  10000 ????		00 d8	    e	       =	$d8
    110  10000 ????		00 d9	    F	       =	$d9
    111  10000 ????		00 d9	    f	       =	$d9
    112  10000 ????		00 da	    G	       =	$da
    113  10000 ????		00 da	    g	       =	$da
    114  10000 ????		00 db	    H	       =	$db
    115  10000 ????		00 db	    h	       =	$db
    116  10000 ????		00 dc	    I	       =	$dc
    117  10000 ????		00 dc	    i	       =	$dc
    118  10000 ????		00 dd	    J	       =	$dd
    119  10000 ????		00 dd	    j	       =	$dd
    120  10000 ????		00 de	    K	       =	$de
    121  10000 ????		00 de	    k	       =	$de
    122  10000 ????		00 df	    L	       =	$df
    123  10000 ????		00 df	    l	       =	$df
    124  10000 ????		00 e0	    M	       =	$e0
    125  10000 ????		00 e0	    m	       =	$e0
    126  10000 ????		00 e1	    N	       =	$e1
    127  10000 ????		00 e1	    n	       =	$e1
    128  10000 ????		00 e2	    O	       =	$e2
    129  10000 ????		00 e2	    o	       =	$e2
    130  10000 ????		00 e3	    P	       =	$e3
    131  10000 ????		00 e3	    p	       =	$e3
    132  10000 ????		00 e4	    Q	       =	$e4
    133  10000 ????		00 e4	    q	       =	$e4
    134  10000 ????		00 e5	    R	       =	$e5
    135  10000 ????		00 e5	    r	       =	$e5
    136  10000 ????		00 e6	    S	       =	$e6
    137  10000 ????		00 e6	    s	       =	$e6
    138  10000 ????		00 e7	    T	       =	$e7
    139  10000 ????		00 e7	    t	       =	$e7
    140  10000 ????		00 e8	    U	       =	$e8
    141  10000 ????		00 e8	    u	       =	$e8
    142  10000 ????		00 e9	    V	       =	$e9
    143  10000 ????		00 e9	    v	       =	$e9
    144  10000 ????		00 ea	    W	       =	$ea
    145  10000 ????		00 ea	    w	       =	$ea
    146  10000 ????		00 eb	    X	       =	$eb
    147  10000 ????		00 eb	    x	       =	$eb
    148  10000 ????		00 ec	    Y	       =	$ec
    149  10000 ????		00 ec	    y	       =	$ec
    150  10000 ????		00 ed	    Z	       =	$ed
    151  10000 ????		00 ed	    z	       =	$ed
    152  10000 ????
    153  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    154  10000 ????		00 ef	    playfieldpos =	$ef
    155  10000 ????
    156  10000 ????						; available for other uses, or if unused, provide more stack space
    157  10000 ????
    158  10000 ????		00 f0	    aux1       =	$f0
    159  10000 ????		00 f1	    aux2       =	$f1
    160  10000 ????		00 f2	    aux3       =	$f2
    161  10000 ????		00 f3	    aux4       =	$f3
    162  10000 ????		00 f4	    aux5       =	$f4
    163  10000 ????		00 f5	    aux6       =	$f5
    164  10000 ????
    165  10000 ????						; playfield color/height pointers
    166  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    167  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    168  10000 ????						; the above pointers are the same because if color and height are both used together,
    169  10000 ????						; they must used absolute indexed and cannot use pointers
    170  10000 ????
    171  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    172  10000 ????						; upper 3 bits of $f2 contain the number of lives
    173  10000 ????		00 f4	    lifecolor  =	$f4
    174  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    175  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    176  10000 ????
    177  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    178  10000 ????		00 f3	    pfscore2   =	$f3
    179  10000 ????		00 f4	    pfscorecolor =	$f4
    180  10000 ????
    181  10000 ????		00 f6	    stack1     =	$f6
    182  10000 ????		00 f7	    stack2     =	$f7
    183  10000 ????		00 f8	    stack3     =	$f8
    184  10000 ????		00 f9	    stack4     =	$f9
    185  10000 ????						; the stack bytes above may be used in the kernel
    186  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    187  10000 ????
    188  10000 ????				       MAC	return
    189  10000 ????				       ifnconst	bankswitch
    190  10000 ????				       rts
    191  10000 ????				       else
    192  10000 ????				       jmp	BS_return
    193  10000 ????				       endif
    194  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    195  10000 ????
    196  10000 ????			   -	       ifconst	superchip
    197  10000 ????			   -playfieldbase =	$10D0
    198  10000 ????			   -	       include	superchip.h
    199  10000 ????				       else
    200  10000 ????		00 a4	    playfieldbase =	$A4
    201  10000 ????				       endif
    202  10000 ????
    203  10000 ????				       ifnconst	pfhalfwidth
    204  10000 ????		00 04	    pfwidth    =	4
    205  10000 ????		00 0e	    PF1L       =	PF1
    206  10000 ????		00 0f	    PF2L       =	PF2
    207  10000 ????		00 0e	    PF1R       =	PF1
    208  10000 ????		00 0f	    PF2R       =	PF2
    209  10000 ????		00 00	    pfadjust   =	0
    210  10000 ????			   -	       else
    211  10000 ????			   -pfwidth    =	2
    212  10000 ????			   -	       ifconst	pfcenter
    213  10000 ????			   -PF1L       =	$3F	; no effect
    214  10000 ????			   -PF2L       =	PF2
    215  10000 ????			   -PF1R       =	$3F
    216  10000 ????			   -PF2R       =	PF2	; no effect
    217  10000 ????			   -pfadjust   =	1
    218  10000 ????			   -	       else
    219  10000 ????			   -PF1L       =	PF1
    220  10000 ????			   -PF2L       =	PF2
    221  10000 ????			   -PF1R       =	$3F	; no effect
    222  10000 ????			   -PF2R       =	$3F	; no effect
    223  10000 ????			   -pfadjust   =	0
    224  10000 ????			   -	       endif
    225  10000 ????				       endif
    226  10000 ????
    227  10000 ????						; define playfield start based on height
    228  10000 ????				       ifnconst	pfres
    229  10000 ????		00 a4	    playfield  =	playfieldbase
    230  10000 ????			   -	       else
    231  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    232  10000 ????				       endif
------- FILE C:\Users\kev12\Documents\GT\IntroCM\Project6\racing\default.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 01	    pfscore    =	1
      4  10000 ????
      5  10000 ????		00 01	    PFcolors   =	1
      6  10000 ????		00 01	    player1colors =	1
      7  10000 ????		00 01	    playercolors =	1
      8  10000 ????		00 01	    player1colors =	1
------- FILE C:\Users\kev12\Documents\GT\IntroCM\Project6\racing\default.bas.asm
      6  10000 ????			   -	       ifconst	bankswitch
      7  10000 ????			   -	       if	bankswitch == 8
      8  10000 ????			   -	       ORG	$1000
      9  10000 ????			   -	       RORG	$D000
     10  10000 ????			   -	       endif
     11  10000 ????			   -	       if	bankswitch == 16
     12  10000 ????			   -	       ORG	$1000
     13  10000 ????			   -	       RORG	$9000
     14  10000 ????			   -	       endif
     15  10000 ????			   -	       if	bankswitch == 32
     16  10000 ????			   -	       ORG	$1000
     17  10000 ????			   -	       RORG	$1000
     18  10000 ????			   -	       endif
     19  10000 ????			   -	       if	bankswitch == 64
     20  10000 ????			   -	       ORG	$1000
     21  10000 ????			   -	       RORG	$1000
     22  10000 ????			   -	       endif
     23  10000 ????				       else
     24  f000					      ORG	$F000
     25  f000					      endif
     26  f000
     27  f000				  -	      ifconst	bankswitch_hotspot
     28  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     29  f000				  -	      .byte	0	; stop unexpected bankswitches
     30  f000				  -	      endif
     31  f000					      endif
     32  f000				   start
     33  f000		       78		      sei
     34  f001		       d8		      cld
     35  f002		       a0 00		      ldy	#0
     36  f004		       a5 d0		      lda	$D0
     37  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     38  f008		       d0 07		      bne	MachineIs2600
     39  f00a		       a5 d1		      lda	$D1
     40  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     41  f00e		       d0 01		      bne	MachineIs2600
     42  f010		       88		      dey
     43  f011				   MachineIs2600
     44  f011		       a2 00		      ldx	#0
     45  f013		       8a		      txa
     46  f014				   clearmem
     47  f014		       e8		      inx
     48  f015		       9a		      txs
     49  f016		       48		      pha
     50  f017		       d0 fb		      bne	clearmem
     51  f019		       84 9c		      sty	temp1
     52  f01b					      ifnconst	multisprite
     53  f01b				  -	      ifconst	pfrowheight
     54  f01b				  -	      lda	#pfrowheight
     55  f01b					      else
     56  f01b				  -	      ifconst	pfres
     57  f01b				  -	      lda	#(96/pfres)
     58  f01b					      else
     59  f01b		       a9 08		      lda	#8
     60  f01d					      endif
     61  f01d					      endif
     62  f01d		       85 ef		      sta	playfieldpos
     63  f01f					      endif
     64  f01f		       a2 05		      ldx	#5
     65  f021				   initscore
     66  f021		       a9 9c		      lda	#<scoretable
     67  f023		       95 96		      sta	scorepointers,x
     68  f025		       ca		      dex
     69  f026		       10 f9		      bpl	initscore
     70  f028		       a9 01		      lda	#1
     71  f02a		       85 0a		      sta	CTRLPF
     72  f02c		       0d 84 02 	      ora	INTIM
     73  f02f		       85 a2		      sta	rand
     74  f031
     75  f031				  -	      ifconst	multisprite
     76  f031				  -	      jsr	multisprite_setup
     77  f031					      endif
     78  f031
     79  f031					      ifnconst	bankswitch
     80  f031		       4c 5d f4 	      jmp	game
     81  f034				  -	      else
     82  f034				  -	      lda	#>(game-1)
     83  f034				  -	      pha
     84  f034				  -	      lda	#<(game-1)
     85  f034				  -	      pha
     86  f034				  -	      pha
     87  f034				  -	      pha
     88  f034				  -	      ldx	#1
     89  f034				  -	      jmp	BS_jsr
     90  f034					      endif
     91  f034							; This is a 2-line kernel!
     92  f034					      ifnconst	vertical_reflect
     93  f034				   kernel
     94  f034					      endif
     95  f034		       85 02		      sta	WSYNC
     96  f036		       a9 ff		      lda	#255
     97  f038		       8d 96 02 	      sta	TIM64T
     98  f03b
     99  f03b		       a9 01		      lda	#1
    100  f03d		       85 27		      sta	VDELBL
    101  f03f		       85 25		      sta	VDELP0
    102  f041		       a6 92		      ldx	ballheight
    103  f043		       e8		      inx
    104  f044		       e8		      inx
    105  f045		       86 9f		      stx	temp4
    106  f047		       a5 86		      lda	player1y
    107  f049		       85 9e		      sta	temp3
    108  f04b
    109  f04b				  -	      ifconst	shakescreen
    110  f04b				  -	      jsr	doshakescreen
    111  f04b					      else
    112  f04b		       a6 90		      ldx	missile0height
    113  f04d		       e8		      inx
    114  f04e					      endif
    115  f04e
    116  f04e		       e8		      inx
    117  f04f		       86 f6		      stx	stack1
    118  f051
    119  f051		       a5 89		      lda	bally
    120  f053		       85 f7		      sta	stack2
    121  f055
    122  f055		       a5 85		      lda	player0y
    123  f057		       a2 00		      ldx	#0
    124  f059		       85 02		      sta	WSYNC
    125  f05b		       86 1b		      stx	GRP0
    126  f05d		       86 1c		      stx	GRP1
    127  f05f		       86 0e		      stx	PF1L
    128  f061		       86 0f		      stx	PF2
    129  f063		       86 2c		      stx	CXCLR
    130  f065				  -	      ifconst	readpaddle
    131  f065				  -	      stx	paddle
    132  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    134  f067					      endif
    135  f067
    136  f067		       95 9d		      sta	temp2,x
    137  f069
    138  f069							;store these so they can be retrieved later
    139  f069					      ifnconst	pfres
    140  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    141  f06b				  -	      else
    142  f06b				  -	      ldx	#132-pfres*pfwidth
    143  f06b					      endif
    144  f06b
    145  f06b		       c6 85		      dec	player0y
    146  f06d
    147  f06d		       a5 91		      lda	missile0y
    148  f06f		       85 a0		      sta	temp5
    149  f071		       a5 88		      lda	missile1y
    150  f073		       85 a1		      sta	temp6
    151  f075
    152  f075		       a5 ef		      lda	playfieldpos
    153  f077		       85 9c		      sta	temp1
    154  f079
    155  f079				  -	      ifconst	pfrowheight
    156  f079				  -	      lda	#pfrowheight+2
    157  f079					      else
    158  f079					      ifnconst	pfres
    159  f079		       a9 0a		      lda	#10
    160  f07b				  -	      else
    161  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    162  f07b					      endif
    163  f07b					      endif
    164  f07b		       18		      clc
    165  f07c		       e5 ef		      sbc	playfieldpos
    166  f07e		       85 ef		      sta	playfieldpos
    167  f080		       4c a8 f0 	      jmp	.startkernel
    168  f083
    169  f083				   .skipDrawP0
    170  f083		       a9 00		      lda	#0
    171  f085		       a8		      tay
    172  f086		       4c d7 f0 	      jmp	.continueP0
    173  f089
    174  f089				   .skipDrawP1
    175  f089		       a9 00		      lda	#0
    176  f08b		       a8		      tay
    177  f08c		       4c b2 f0 	      jmp	.continueP1
    178  f08f
    179  f08f				   .kerloop		; enter at cycle 59??
    180  f08f
    181  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    183  f090				   continuekernel2
    184  f090		       a5 92		      lda	ballheight
    185  f092
    186  f092				  -	      ifconst	pfres
    187  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    188  f092				  -	      sty	PF1L	;3
    189  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    190  f092				  -	      sty	PF2L	;3
    191  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    192  f092				  -	      sty	PF1R	; 3 too early?
    193  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    194  f092				  -	      sty	PF2R	;3
    195  f092					      else
    196  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    197  f094		       84 0e		      sty	PF1L	;3
    198  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    199  f098		       84 0f		      sty	PF2L	;3
    200  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    201  f09c		       84 0e		      sty	PF1R	; 3 too early?
    202  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    203  f0a0		       84 0f		      sty	PF2R	;3
    204  f0a2					      endif
    205  f0a2
    206  f0a2							; should be playfield+$38 for width=2
    207  f0a2
    208  f0a2		       c7 89		      dcp	bally
    209  f0a4		       2a		      rol
    210  f0a5		       2a		      rol
    211  f0a6							; rol
    212  f0a6							; rol
    213  f0a6				   goback
    214  f0a6		       85 1f		      sta	ENABL
    215  f0a8				   .startkernel
    216  f0a8		       a5 8f		      lda	player1height	;3
    217  f0aa		       c7 86		      dcp	player1y	;5
    218  f0ac		       90 db		      bcc	.skipDrawP1	;2
    219  f0ae		       a4 86		      ldy	player1y	;3
    220  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    221  f0b2							; so it doesn't cross a page boundary!
    222  f0b2
    223  f0b2				   .continueP1
    224  f0b2		       85 1c		      sta	GRP1	;3
    225  f0b4
    226  f0b4				  -	      ifnconst	player1colors
    227  f0b4				  -	      lda	missile1height	;3
    228  f0b4				  -	      dcp	missile1y	;5
    229  f0b4				  -	      rol		;2
    230  f0b4				  -	      rol		;2
    231  f0b4				  -	      sta	ENAM1	;3
    232  f0b4					      else
    233  f0b4		       b1 87		      lda	(player1color),y
    234  f0b6		       85 07		      sta	COLUP1
    235  f0b8				  -	      ifnconst	playercolors
    236  f0b8				  -	      sleep	7
    237  f0b8					      else
    238  f0b8		       ad 82 00 	      lda.w	player0colorstore
    239  f0bb		       85 06		      sta	COLUP0
    240  f0bd					      endif
    241  f0bd					      endif
    242  f0bd
    243  f0bd				  -	      ifconst	pfres
    244  f0bd				  -	      lda	playfield+pfres*pfwidth-132,x
    245  f0bd				  -	      sta	PF1L	;3
    246  f0bd				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    247  f0bd				  -	      sta	PF2L	;3
    248  f0bd				  -	      lda	playfield+pfres*pfwidth-129,x
    249  f0bd				  -	      sta	PF1R	; 3 too early?
    250  f0bd				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    251  f0bd				  -	      sta	PF2R	;3
    252  f0bd					      else
    253  f0bd		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    254  f0bf		       85 0e		      sta	PF1L	;3
    255  f0c1		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    256  f0c3		       85 0f		      sta	PF2L	;3
    257  f0c5		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    258  f0c7		       85 0e		      sta	PF1R	; 3 too early?
    259  f0c9		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    260  f0cb		       85 0f		      sta	PF2R	;3
    261  f0cd					      endif
    262  f0cd							; sleep 3
    263  f0cd
    264  f0cd		       a5 8e		      lda	player0height
    265  f0cf		       c7 85		      dcp	player0y
    266  f0d1		       90 b0		      bcc	.skipDrawP0
    267  f0d3		       a4 85		      ldy	player0y
    268  f0d5		       b1 8a		      lda	(player0pointer),y
    269  f0d7				   .continueP0
    270  f0d7		       85 1b		      sta	GRP0
    271  f0d9
    272  f0d9					      ifnconst	no_blank_lines
    273  f0d9				  -	      ifnconst	playercolors
    274  f0d9				  -	      lda	missile0height	;3
    275  f0d9				  -	      dcp	missile0y	;5
    276  f0d9				  -	      sbc	stack1
    277  f0d9				  -	      sta	ENAM0	;3
    278  f0d9					      else
    279  f0d9		       b1 90		      lda	(player0color),y
    280  f0db		       85 82		      sta	player0colorstore
      0  f0dd					      sleep	6
      1  f0dd				   .CYCLES    SET	6
      2  f0dd
      3  f0dd				  -	      IF	.CYCLES < 2
      4  f0dd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0dd				  -	      ERR
      6  f0dd					      ENDIF
      7  f0dd
      8  f0dd				  -	      IF	.CYCLES & 1
      9  f0dd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0dd				  -	      nop	0
     11  f0dd				  -	      ELSE
     12  f0dd				  -	      bit	VSYNC
     13  f0dd				  -	      ENDIF
     14  f0dd				  -.CYCLES    SET	.CYCLES - 3
     15  f0dd					      ENDIF
     16  f0dd
     17  f0dd					      REPEAT	.CYCLES / 2
     18  f0dd		       ea		      nop
     17  f0dd					      REPEND
     18  f0de		       ea		      nop
     17  f0de					      REPEND
     18  f0df		       ea		      nop
     19  f0e0					      REPEND
    282  f0e0					      endif
    283  f0e0		       c6 9c		      dec	temp1
    284  f0e2		       d0 ab		      bne	continuekernel
    285  f0e4				  -	      else
    286  f0e4				  -	      dec	temp1
    287  f0e4				  -	      beq	altkernel2
    288  f0e4				  -	      ifconst	readpaddle
    289  f0e4				  -	      ldy	currentpaddle
    290  f0e4				  -	      lda	INPT0,y
    291  f0e4				  -	      bpl	noreadpaddle
    292  f0e4				  -	      inc	paddle
    293  f0e4				  -	      jmp	continuekernel2
    294  f0e4				  -noreadpaddle
    295  f0e4				  -	      sleep	2
    296  f0e4				  -	      jmp	continuekernel
    297  f0e4				  -	      else
    298  f0e4				  -	      ifnconst	playercolors
    299  f0e4				  -	      ifconst	PFcolors
    300  f0e4				  -	      txa
    301  f0e4				  -	      tay
    302  f0e4				  -	      lda	(pfcolortable),y
    303  f0e4				  -	      ifnconst	backgroundchange
    304  f0e4				  -	      sta	COLUPF
    305  f0e4				  -	      else
    306  f0e4				  -	      sta	COLUBK
    307  f0e4				  -	      endif
    308  f0e4				  -	      jmp	continuekernel
    309  f0e4				  -	      else
    310  f0e4				  -	      ifconst	kernelmacrodef
    311  f0e4				  -	      kernelmacro
    312  f0e4				  -	      else
    313  f0e4				  -	      sleep	12
    314  f0e4				  -	      endif
    315  f0e4				  -	      endif
    316  f0e4				  -	      else
    317  f0e4				  -	      lda	(player0color),y
    318  f0e4				  -	      sta	player0colorstore
    319  f0e4				  -	      sleep	4
    320  f0e4				  -	      endif
    321  f0e4				  -	      jmp	continuekernel
    322  f0e4				  -	      endif
    323  f0e4				  -altkernel2
    324  f0e4				  -	      txa
    325  f0e4				  -	      ifnconst	vertical_reflect
    326  f0e4				  -	      sbx	#256-pfwidth
    327  f0e4				  -	      else
    328  f0e4				  -	      sbx	#256-pfwidth/2
    329  f0e4				  -	      endif
    330  f0e4				  -	      bmi	lastkernelline
    331  f0e4				  -	      ifconst	pfrowheight
    332  f0e4				  -	      lda	#pfrowheight
    333  f0e4				  -	      else
    334  f0e4				  -	      ifnconst	pfres
    335  f0e4				  -	      lda	#8
    336  f0e4				  -	      else
    337  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    338  f0e4				  -	      endif
    339  f0e4				  -	      endif
    340  f0e4				  -	      sta	temp1
    341  f0e4				  -	      jmp	continuekernel
    342  f0e4					      endif
    343  f0e4
    344  f0e4				   altkernel
    345  f0e4
    346  f0e4				  -	      ifconst	PFmaskvalue
    347  f0e4				  -	      lda	#PFmaskvalue
    348  f0e4					      else
    349  f0e4		       a9 00		      lda	#0
    350  f0e6					      endif
    351  f0e6		       85 0e		      sta	PF1L
    352  f0e8		       85 0f		      sta	PF2
    353  f0ea
    354  f0ea
    355  f0ea							;sleep 3
    356  f0ea
    357  f0ea							;28 cycles to fix things
    358  f0ea							;minus 11=17
    359  f0ea
    360  f0ea							; lax temp4
    361  f0ea							; clc
    362  f0ea		       8a		      txa
    363  f0eb					      ifnconst	vertical_reflect
    364  f0eb		       cb fc		      sbx	#256-pfwidth
    365  f0ed				  -	      else
    366  f0ed				  -	      sbx	#256-pfwidth/2
    367  f0ed					      endif
    368  f0ed
    369  f0ed		       30 12		      bmi	lastkernelline
    370  f0ef
    371  f0ef				  -	      ifconst	PFcolorandheight
    372  f0ef				  -	      ifconst	pfres
    373  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    374  f0ef				  -	      else
    375  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    376  f0ef				  -	      endif
    377  f0ef				  -	      ifnconst	backgroundchange
    378  f0ef				  -	      sty	COLUPF
    379  f0ef				  -	      else
    380  f0ef				  -	      sty	COLUBK
    381  f0ef				  -	      endif
    382  f0ef				  -	      ifconst	pfres
    383  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    384  f0ef				  -	      else
    385  f0ef				  -	      lda	playfieldcolorandheight-88,x
    386  f0ef				  -	      endif
    387  f0ef				  -	      sta.w	temp1
    388  f0ef					      endif
    389  f0ef				  -	      ifconst	PFheights
    390  f0ef				  -	      lsr
    391  f0ef				  -	      lsr
    392  f0ef				  -	      tay
    393  f0ef				  -	      lda	(pfheighttable),y
    394  f0ef				  -	      sta.w	temp1
    395  f0ef					      endif
    396  f0ef					      ifconst	PFcolors
    397  f0ef		       a8		      tay
    398  f0f0		       b1 f0		      lda	(pfcolortable),y
    399  f0f2					      ifnconst	backgroundchange
    400  f0f2		       85 08		      sta	COLUPF
    401  f0f4				  -	      else
    402  f0f4				  -	      sta	COLUBK
    403  f0f4					      endif
    404  f0f4				  -	      ifconst	pfrowheight
    405  f0f4				  -	      lda	#pfrowheight
    406  f0f4					      else
    407  f0f4					      ifnconst	pfres
    408  f0f4		       a9 08		      lda	#8
    409  f0f6				  -	      else
    410  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    411  f0f6					      endif
    412  f0f6					      endif
    413  f0f6		       85 9c		      sta	temp1
    414  f0f8					      endif
    415  f0f8					      ifnconst	PFcolorandheight
    416  f0f8				  -	      ifnconst	PFcolors
    417  f0f8				  -	      ifnconst	PFheights
    418  f0f8				  -	      ifnconst	no_blank_lines
    419  f0f8				  -			; read paddle 0
    420  f0f8				  -			; lo-res paddle read
    421  f0f8				  -			; bit INPT0
    422  f0f8				  -			; bmi paddleskipread
    423  f0f8				  -			; inc paddle0
    424  f0f8				  -			;donepaddleskip
    425  f0f8				  -	      sleep	10
    426  f0f8				  -	      ifconst	pfrowheight
    427  f0f8				  -	      lda	#pfrowheight
    428  f0f8				  -	      else
    429  f0f8				  -	      ifnconst	pfres
    430  f0f8				  -	      lda	#8
    431  f0f8				  -	      else
    432  f0f8				  -	      lda	#(96/pfres)	; try to come close to the real size
    433  f0f8				  -	      endif
    434  f0f8				  -	      endif
    435  f0f8				  -	      sta	temp1
    436  f0f8				  -	      endif
    437  f0f8				  -	      endif
    438  f0f8					      endif
    439  f0f8					      endif
    440  f0f8
    441  f0f8
    442  f0f8		       a5 92		      lda	ballheight
    443  f0fa		       c7 89		      dcp	bally
    444  f0fc		       e5 9f		      sbc	temp4
    445  f0fe
    446  f0fe
    447  f0fe		       4c a6 f0 	      jmp	goback
    448  f101
    449  f101
    450  f101					      ifnconst	no_blank_lines
    451  f101				   lastkernelline
    452  f101				  -	      ifnconst	PFcolors
    453  f101				  -	      sleep	10
    454  f101					      else
    455  f101		       a0 7c		      ldy	#124
    456  f103		       b1 f0		      lda	(pfcolortable),y
    457  f105		       85 08		      sta	COLUPF
    458  f107					      endif
    459  f107
    460  f107				  -	      ifconst	PFheights
    461  f107				  -	      ldx	#1
    462  f107				  -			;sleep 4
    463  f107				  -	      sleep	3	; REVENG - this was over 1 cycle
    464  f107					      else
    465  f107		       a6 ef		      ldx	playfieldpos
    466  f109							;sleep 3
      0  f109					      sleep	2	; REVENG - this was over 1 cycle
      1  f109				   .CYCLES    SET	2
      2  f109
      3  f109				  -	      IF	.CYCLES < 2
      4  f109				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f109				  -	      ERR
      6  f109					      ENDIF
      7  f109
      8  f109				  -	      IF	.CYCLES & 1
      9  f109				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f109				  -	      nop	0
     11  f109				  -	      ELSE
     12  f109				  -	      bit	VSYNC
     13  f109				  -	      ENDIF
     14  f109				  -.CYCLES    SET	.CYCLES - 3
     15  f109					      ENDIF
     16  f109
     17  f109					      REPEAT	.CYCLES / 2
     18  f109		       ea		      nop
     19  f10a					      REPEND
    468  f10a					      endif
    469  f10a
    470  f10a		       4c 28 f1 	      jmp	enterlastkernel
    471  f10d
    472  f10d				  -	      else
    473  f10d				  -lastkernelline
    474  f10d				  -
    475  f10d				  -	      ifconst	PFheights
    476  f10d				  -	      ldx	#1
    477  f10d				  -			;sleep 5
    478  f10d				  -	      sleep	4	; REVENG - this was over 1 cycle
    479  f10d				  -	      else
    480  f10d				  -	      ldx	playfieldpos
    481  f10d				  -			;sleep 4
    482  f10d				  -	      sleep	3	; REVENG - this was over 1 cycle
    483  f10d				  -	      endif
    484  f10d				  -
    485  f10d				  -	      cpx	#0
    486  f10d				  -	      bne	.enterfromNBL
    487  f10d				  -	      jmp	no_blank_lines_bailout
    488  f10d					      endif
    489  f10d
    490  f10d				  -	      if	((<*)>$d5)
    491  f10d				  -	      align	256
    492  f10d					      endif
    493  f10d							; this is a kludge to prevent page wrapping - fix!!!
    494  f10d
    495  f10d				   .skipDrawlastP1
    496  f10d		       a9 00		      lda	#0
    497  f10f		       a8		      tay		; REVENG - added so we don't cross a page
    498  f110		       4c 3a f1 	      jmp	.continuelastP1
    499  f113
    500  f113				   .endkerloop		; enter at cycle 59??
    501  f113
    502  f113		       ea		      nop
    503  f114
    504  f114				   .enterfromNBL
    505  f114				  -	      ifconst	pfres
    506  f114				  -	      ldy.w	playfield+pfres*pfwidth-4
    507  f114				  -	      sty	PF1L	;3
    508  f114				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    509  f114				  -	      sty	PF2L	;3
    510  f114				  -	      ldy.w	playfield+pfres*pfwidth-1
    511  f114				  -	      sty	PF1R	; possibly too early?
    512  f114				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    513  f114				  -	      sty	PF2R	;3
    514  f114					      else
    515  f114		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    516  f117		       84 0e		      sty	PF1L	;3
    517  f119		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    518  f11c		       84 0f		      sty	PF2L	;3
    519  f11e		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    520  f121		       84 0e		      sty	PF1R	; possibly too early?
    521  f123		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    522  f126		       84 0f		      sty	PF2R	;3
    523  f128					      endif
    524  f128
    525  f128				   enterlastkernel
    526  f128		       a5 92		      lda	ballheight
    527  f12a
    528  f12a							; tya
    529  f12a		       c7 89		      dcp	bally
    530  f12c							; sleep 4
    531  f12c
    532  f12c							; sbc stack3
    533  f12c		       2a		      rol
    534  f12d		       2a		      rol
    535  f12e		       85 1f		      sta	ENABL
    536  f130
    537  f130		       a5 8f		      lda	player1height	;3
    538  f132		       c7 86		      dcp	player1y	;5
    539  f134		       90 d7		      bcc	.skipDrawlastP1
    540  f136		       a4 86		      ldy	player1y	;3
    541  f138		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    542  f13a							; so it doesn't cross a page boundary!
    543  f13a
    544  f13a				   .continuelastP1
    545  f13a		       85 1c		      sta	GRP1	;3
    546  f13c
    547  f13c				  -	      ifnconst	player1colors
    548  f13c				  -	      lda	missile1height	;3
    549  f13c				  -	      dcp	missile1y	;5
    550  f13c					      else
    551  f13c		       b1 87		      lda	(player1color),y
    552  f13e		       85 07		      sta	COLUP1
    553  f140					      endif
    554  f140
    555  f140		       ca		      dex
    556  f141							;dec temp4 ; might try putting this above PF writes
    557  f141		       f0 37		      beq	endkernel
    558  f143
    559  f143
    560  f143				  -	      ifconst	pfres
    561  f143				  -	      ldy.w	playfield+pfres*pfwidth-4
    562  f143				  -	      sty	PF1L	;3
    563  f143				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    564  f143				  -	      sty	PF2L	;3
    565  f143				  -	      ldy.w	playfield+pfres*pfwidth-1
    566  f143				  -	      sty	PF1R	; possibly too early?
    567  f143				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    568  f143				  -	      sty	PF2R	;3
    569  f143					      else
    570  f143		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    571  f146		       84 0e		      sty	PF1L	;3
    572  f148		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    573  f14b		       84 0f		      sty	PF2L	;3
    574  f14d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    575  f150		       84 0e		      sty	PF1R	; possibly too early?
    576  f152		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    577  f155		       84 0f		      sty	PF2R	;3
    578  f157					      endif
    579  f157
    580  f157				  -	      ifnconst	player1colors
    581  f157				  -	      rol		;2
    582  f157				  -	      rol		;2
    583  f157				  -	      sta	ENAM1	;3
    584  f157					      else
    585  f157				  -	      ifnconst	playercolors
    586  f157				  -	      sleep	7
    587  f157					      else
    588  f157		       ad 82 00 	      lda.w	player0colorstore
    589  f15a		       85 06		      sta	COLUP0
    590  f15c					      endif
    591  f15c					      endif
    592  f15c
    593  f15c		       ad 8e 00 	      lda.w	player0height
    594  f15f		       c7 85		      dcp	player0y
    595  f161		       90 11		      bcc	.skipDrawlastP0
    596  f163		       a4 85		      ldy	player0y
    597  f165		       b1 8a		      lda	(player0pointer),y
    598  f167				   .continuelastP0
    599  f167		       85 1b		      sta	GRP0
    600  f169
    601  f169
    602  f169
    603  f169					      ifnconst	no_blank_lines
    604  f169		       a5 90		      lda	missile0height	;3
    605  f16b		       c7 91		      dcp	missile0y	;5
    606  f16d		       e5 f6		      sbc	stack1
    607  f16f		       85 1d		      sta	ENAM0	;3
    608  f171		       4c 13 f1 	      jmp	.endkerloop
    609  f174				  -	      else
    610  f174				  -	      ifconst	readpaddle
    611  f174				  -	      ldy	currentpaddle
    612  f174				  -	      lda	INPT0,y
    613  f174				  -	      bpl	noreadpaddle2
    614  f174				  -	      inc	paddle
    615  f174				  -	      jmp	.endkerloop
    616  f174				  -noreadpaddle2
    617  f174				  -	      sleep	4
    618  f174				  -	      jmp	.endkerloop
    619  f174				  -	      else		; no_blank_lines and no paddle reading
    620  f174				  -	      pla
    621  f174				  -	      pha		; 14 cycles in 4 bytes
    622  f174				  -	      pla
    623  f174				  -	      pha
    624  f174				  -			; sleep 14
    625  f174				  -	      jmp	.endkerloop
    626  f174				  -	      endif
    627  f174					      endif
    628  f174
    629  f174
    630  f174							; ifconst donepaddleskip
    631  f174							;paddleskipread
    632  f174							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    633  f174							; plus we get a lo-res paddle read
    634  f174							; bmi donepaddleskip
    635  f174							; endif
    636  f174
    637  f174				   .skipDrawlastP0
    638  f174		       a9 00		      lda	#0
    639  f176		       a8		      tay
    640  f177		       4c 67 f1 	      jmp	.continuelastP0
    641  f17a
    642  f17a				  -	      ifconst	no_blank_lines
    643  f17a				  -no_blank_lines_bailout
    644  f17a				  -	      ldx	#0
    645  f17a					      endif
    646  f17a
    647  f17a				   endkernel
    648  f17a							; 6 digit score routine
    649  f17a		       86 0e		      stx	PF1
    650  f17c		       86 0f		      stx	PF2
    651  f17e		       86 0d		      stx	PF0
    652  f180		       18		      clc
    653  f181
    654  f181				  -	      ifconst	pfrowheight
    655  f181				  -	      lda	#pfrowheight+2
    656  f181					      else
    657  f181					      ifnconst	pfres
    658  f181		       a9 0a		      lda	#10
    659  f183				  -	      else
    660  f183				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    661  f183					      endif
    662  f183					      endif
    663  f183
    664  f183		       e5 ef		      sbc	playfieldpos
    665  f185		       85 ef		      sta	playfieldpos
    666  f187		       8a		      txa
    667  f188
    668  f188				  -	      ifconst	shakescreen
    669  f188				  -	      bit	shakescreen
    670  f188				  -	      bmi	noshakescreen2
    671  f188				  -	      ldx	#$3D
    672  f188				  -noshakescreen2
    673  f188					      endif
    674  f188
    675  f188		       95 02		      sta	WSYNC,x
    676  f18a
    677  f18a							; STA WSYNC ;first one, need one more
    678  f18a		       85 0b		      sta	REFP0
    679  f18c		       85 0c		      sta	REFP1
    680  f18e		       85 1b		      STA	GRP0
    681  f190		       85 1c		      STA	GRP1
    682  f192							; STA PF1
    683  f192							; STA PF2
    684  f192		       85 2b		      sta	HMCLR
    685  f194		       85 1d		      sta	ENAM0
    686  f196		       85 1e		      sta	ENAM1
    687  f198		       85 1f		      sta	ENABL
    688  f19a
    689  f19a		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    690  f19c		       85 85		      sta	player0y
    691  f19e		       a5 9e		      lda	temp3
    692  f1a0		       85 86		      sta	player1y
    693  f1a2				  -	      ifnconst	player1colors
    694  f1a2				  -	      lda	temp6
    695  f1a2				  -	      sta	missile1y
    696  f1a2					      endif
    697  f1a2				  -	      ifnconst	playercolors
    698  f1a2				  -	      ifnconst	readpaddle
    699  f1a2				  -	      lda	temp5
    700  f1a2				  -	      sta	missile0y
    701  f1a2				  -	      endif
    702  f1a2					      endif
    703  f1a2		       a5 f7		      lda	stack2
    704  f1a4		       85 89		      sta	bally
    705  f1a6
    706  f1a6							; REVENG - strangely, this isn't required any more. might have
    707  f1a6							; resulted from the no_blank_lines score bounce fix
    708  f1a6							;ifconst no_blank_lines
    709  f1a6							;sta WSYNC
    710  f1a6							;endif
    711  f1a6
    712  f1a6		       ad 84 02 	      lda	INTIM
    713  f1a9		       18		      clc
    714  f1aa					      ifnconst	vblank_time
    715  f1aa		       69 8e		      adc	#43+12+87
    716  f1ac				  -	      else
    717  f1ac				  -	      adc	#vblank_time+12+87
    718  f1ac				  -
    719  f1ac					      endif
    720  f1ac							; sta WSYNC
    721  f1ac		       8d 96 02 	      sta	TIM64T
    722  f1af
    723  f1af				  -	      ifconst	minikernel
    724  f1af				  -	      jsr	minikernel
    725  f1af					      endif
    726  f1af
    727  f1af							; now reassign temp vars for score pointers
    728  f1af
    729  f1af							; score pointers contain:
    730  f1af							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    731  f1af							; swap lo2->temp1
    732  f1af							; swap lo4->temp3
    733  f1af							; swap lo6->temp5
    734  f1af					      ifnconst	noscore
    735  f1af		       a5 97		      lda	scorepointers+1
    736  f1b1							; ldy temp1
    737  f1b1		       85 9c		      sta	temp1
    738  f1b3							; sty scorepointers+1
    739  f1b3
    740  f1b3		       a5 99		      lda	scorepointers+3
    741  f1b5							; ldy temp3
    742  f1b5		       85 9e		      sta	temp3
    743  f1b7							; sty scorepointers+3
    744  f1b7
    745  f1b7
    746  f1b7		       85 2b		      sta	HMCLR
    747  f1b9		       ba		      tsx
    748  f1ba		       86 f6		      stx	stack1
    749  f1bc		       a2 e0		      ldx	#$E0
    750  f1be		       86 20		      stx	HMP0
    751  f1c0
    752  f1c0		       a5 a3		      LDA	scorecolor
    753  f1c2		       85 06		      STA	COLUP0
    754  f1c4		       85 07		      STA	COLUP1
    755  f1c6				  -	      ifconst	scorefade
    756  f1c6				  -	      STA	stack2
    757  f1c6					      endif
    758  f1c6					      ifconst	pfscore
    759  f1c6		       a5 f4		      lda	pfscorecolor
    760  f1c8		       85 08		      sta	COLUPF
    761  f1ca					      endif
    762  f1ca		       85 02		      sta	WSYNC
    763  f1cc		       a2 00		      ldx	#0
    764  f1ce		       86 1b		      STx	GRP0
    765  f1d0		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    766  f1d2
    767  f1d2		       a5 9b		      lda	scorepointers+5
    768  f1d4							; ldy temp5
    769  f1d4		       95 a0		      sta	temp5,x
    770  f1d6							; sty scorepointers+5
    771  f1d6		       a9 ff		      lda	#>scoretable
    772  f1d8		       85 97		      sta	scorepointers+1
    773  f1da		       85 99		      sta	scorepointers+3
    774  f1dc		       85 9b		      sta	scorepointers+5
    775  f1de		       85 9d		      sta	temp2
    776  f1e0		       85 9f		      sta	temp4
    777  f1e2		       85 a1		      sta	temp6
    778  f1e4		       a0 07		      LDY	#7
    779  f1e6		       84 25		      STY	VDELP0
    780  f1e8		       85 10		      STA	RESP0
    781  f1ea		       85 11		      STA	RESP1
    782  f1ec
    783  f1ec
    784  f1ec		       a9 03		      LDA	#$03
    785  f1ee		       85 04		      STA	NUSIZ0
    786  f1f0		       85 05		      STA	NUSIZ1
    787  f1f2		       85 26		      STA	VDELP1
    788  f1f4		       a9 f0		      LDA	#$F0
    789  f1f6		       85 21		      STA	HMP1
    790  f1f8		       b1 96		      lda	(scorepointers),y
    791  f1fa		       85 1b		      sta	GRP0
    792  f1fc		       85 2a		      STA	HMOVE	; cycle 73 ?
    793  f1fe		       4c 0a f2 	      jmp	beginscore
    794  f201
    795  f201
    796  f201				  -	      if	((<*)>$d4)
    797  f201				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    798  f201					      endif
    799  f201
    800  f201				   loop2
    801  f201		       b1 96		      lda	(scorepointers),y	;+5 68 204
    802  f203		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    803  f205					      ifconst	pfscore
    804  f205		       ad f2 00 	      lda.w	pfscore1
    805  f208		       85 0e		      sta	PF1
    806  f20a				  -	      else
    807  f20a				  -	      ifconst	scorefade
    808  f20a				  -	      sleep	2
    809  f20a				  -	      dec	stack2	; decrement the temporary scorecolor
    810  f20a				  -	      else
    811  f20a				  -	      sleep	7
    812  f20a				  -	      endif
    813  f20a					      endif
    814  f20a							; cycle 0
    815  f20a				   beginscore
    816  f20a		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    817  f20c		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    818  f20e		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    819  f210		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    820  f212		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    821  f214		       9a		      txs
    822  f215		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    823  f217				  -	      ifconst	scorefade
    824  f217				  -	      lda	stack2
    825  f217					      else
      0  f217					      sleep	3
      1  f217				   .CYCLES    SET	3
      2  f217
      3  f217				  -	      IF	.CYCLES < 2
      4  f217				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f217				  -	      ERR
      6  f217					      ENDIF
      7  f217
      8  f217					      IF	.CYCLES & 1
      9  f217					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f217		       04 00		      nop	0
     11  f219				  -	      ELSE
     12  f219				  -	      bit	VSYNC
     13  f219					      ENDIF
     14  f219				   .CYCLES    SET	.CYCLES - 3
     15  f219					      ENDIF
     16  f219
     17  f219				  -	      REPEAT	.CYCLES / 2
     18  f219				  -	      nop
     19  f219					      REPEND
    827  f219					      endif
    828  f219
    829  f219					      ifconst	pfscore
    830  f219		       a5 f3		      lda	pfscore2
    831  f21b		       85 0e		      sta	PF1
    832  f21d				  -	      else
    833  f21d				  -	      ifconst	scorefade
    834  f21d				  -	      sta	COLUP0
    835  f21d				  -	      sta	COLUP1
    836  f21d				  -	      else
    837  f21d				  -	      sleep	6
    838  f21d				  -	      endif
    839  f21d					      endif
    840  f21d
    841  f21d		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    842  f21f		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    843  f221		       ba		      tsx
    844  f222		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    845  f224		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    846  f226		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    847  f228		       88		      dey
    848  f229		       10 d6		      bpl	loop2	;+2 60 180
    849  f22b
    850  f22b		       a6 f6		      ldx	stack1
    851  f22d		       9a		      txs
    852  f22e							; lda scorepointers+1
    853  f22e		       a4 9c		      ldy	temp1
    854  f230							; sta temp1
    855  f230		       84 97		      sty	scorepointers+1
    856  f232
    857  f232		       a9 00		      LDA	#0
    858  f234		       85 0e		      sta	PF1
    859  f236		       85 1b		      STA	GRP0
    860  f238		       85 1c		      STA	GRP1
    861  f23a		       85 25		      STA	VDELP0
    862  f23c		       85 26		      STA	VDELP1	;do we need these
    863  f23e		       85 04		      STA	NUSIZ0
    864  f240		       85 05		      STA	NUSIZ1
    865  f242
    866  f242							; lda scorepointers+3
    867  f242		       a4 9e		      ldy	temp3
    868  f244							; sta temp3
    869  f244		       84 99		      sty	scorepointers+3
    870  f246
    871  f246							; lda scorepointers+5
    872  f246		       a4 a0		      ldy	temp5
    873  f248							; sta temp5
    874  f248		       84 9b		      sty	scorepointers+5
    875  f24a					      endif		;noscore
    876  f24a		       a9 c2		      LDA	#%11000010
    877  f24c		       85 02		      sta	WSYNC
    878  f24e		       85 01		      STA	VBLANK
      0  f250					      RETURN
      1  f250					      ifnconst	bankswitch
      2  f250		       60		      rts
      3  f251				  -	      else
      4  f251				  -	      jmp	BS_return
      5  f251					      endif
    880  f251
    881  f251				  -	      ifconst	shakescreen
    882  f251				  -doshakescreen
    883  f251				  -	      bit	shakescreen
    884  f251				  -	      bmi	noshakescreen
    885  f251				  -	      sta	WSYNC
    886  f251				  -noshakescreen
    887  f251				  -	      ldx	missile0height
    888  f251				  -	      inx
    889  f251				  -	      rts
    890  f251					      endif
    891  f251
    892  f251							; playfield drawing routines
    893  f251							; you get a 32x12 bitmapped display in a single color :)
    894  f251							; 0-31 and 0-11
    895  f251
    896  f251				   pfclear		; clears playfield - or fill with pattern
    897  f251				  -	      ifconst	pfres
    898  f251				  -	      ldx	#pfres*pfwidth-1
    899  f251					      else
    900  f251		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    901  f253					      endif
    902  f253				   pfclear_loop
    903  f253					      ifnconst	superchip
    904  f253		       95 a4		      sta	playfield,x
    905  f255				  -	      else
    906  f255				  -	      sta	playfield-128,x
    907  f255					      endif
    908  f255		       ca		      dex
    909  f256		       10 fb		      bpl	pfclear_loop
      0  f258					      RETURN
      1  f258					      ifnconst	bankswitch
      2  f258		       60		      rts
      3  f259				  -	      else
      4  f259				  -	      jmp	BS_return
      5  f259					      endif
    911  f259
    912  f259				   setuppointers
    913  f259		       86 9d		      stx	temp2	; store on.off.flip value
    914  f25b		       aa		      tax		; put x-value in x
    915  f25c		       4a		      lsr
    916  f25d		       4a		      lsr
    917  f25e		       4a		      lsr		; divide x pos by 8
    918  f25f		       85 9c		      sta	temp1
    919  f261		       98		      tya
    920  f262		       0a		      asl
    921  f263					      if	pfwidth=4
    922  f263		       0a		      asl		; multiply y pos by 4
    923  f264					      endif		; else multiply by 2
    924  f264		       18		      clc
    925  f265		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    926  f267		       a8		      tay		; put the value in y
    927  f268		       a5 9d		      lda	temp2	; restore on.off.flip value
    928  f26a		       60		      rts
    929  f26b
    930  f26b				   pfread
    931  f26b							;x=xvalue, y=yvalue
    932  f26b		       20 59 f2 	      jsr	setuppointers
    933  f26e		       bd d3 f2 	      lda	setbyte,x
    934  f271		       39 a4 00 	      and	playfield,y
    935  f274		       5d d3 f2 	      eor	setbyte,x
    936  f277							; beq readzero
    937  f277							; lda #1
    938  f277							; readzero
      0  f277					      RETURN
      1  f277					      ifnconst	bankswitch
      2  f277		       60		      rts
      3  f278				  -	      else
      4  f278				  -	      jmp	BS_return
      5  f278					      endif
    940  f278
    941  f278				   pfpixel
    942  f278							;x=xvalue, y=yvalue, a=0,1,2
    943  f278		       20 59 f2 	      jsr	setuppointers
    944  f27b
    945  f27b				  -	      ifconst	bankswitch
    946  f27b				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    947  f27b				  -	      beq	pixelon_r	; if "on" go to on
    948  f27b				  -	      lsr
    949  f27b				  -	      bcs	pixeloff_r	; value is 1 if true
    950  f27b				  -	      lda	playfield,y	; if here, it's "flip"
    951  f27b				  -	      eor	setbyte,x
    952  f27b				  -	      ifconst	superchip
    953  f27b				  -	      sta	playfield-128,y
    954  f27b				  -	      else
    955  f27b				  -	      sta	playfield,y
    956  f27b				  -	      endif
    957  f27b				  -	      RETURN
    958  f27b				  -pixelon_r
    959  f27b				  -	      lda	playfield,y
    960  f27b				  -	      ora	setbyte,x
    961  f27b				  -	      ifconst	superchip
    962  f27b				  -	      sta	playfield-128,y
    963  f27b				  -	      else
    964  f27b				  -	      sta	playfield,y
    965  f27b				  -	      endif
    966  f27b				  -	      RETURN
    967  f27b				  -pixeloff_r
    968  f27b				  -	      lda	setbyte,x
    969  f27b				  -	      eor	#$ff
    970  f27b				  -	      and	playfield,y
    971  f27b				  -	      ifconst	superchip
    972  f27b				  -	      sta	playfield-128,y
    973  f27b				  -	      else
    974  f27b				  -	      sta	playfield,y
    975  f27b				  -	      endif
    976  f27b				  -	      RETURN
    977  f27b				  -
    978  f27b					      else
    979  f27b		       4c ac f2 	      jmp	plotpoint
    980  f27e					      endif
    981  f27e
    982  f27e				   pfhline
    983  f27e							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
    984  f27e		       20 59 f2 	      jsr	setuppointers
    985  f281		       4c 8b f2 	      jmp	noinc
    986  f284				   keepgoing
    987  f284		       e8		      inx
    988  f285		       8a		      txa
    989  f286		       29 07		      and	#7
    990  f288		       d0 01		      bne	noinc
    991  f28a		       c8		      iny
    992  f28b				   noinc
    993  f28b		       20 ac f2 	      jsr	plotpoint
    994  f28e		       e4 9e		      cpx	temp3
    995  f290		       30 f2		      bmi	keepgoing
      0  f292					      RETURN
      1  f292					      ifnconst	bankswitch
      2  f292		       60		      rts
      3  f293				  -	      else
      4  f293				  -	      jmp	BS_return
      5  f293					      endif
    997  f293
    998  f293				   pfvline
    999  f293							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1000  f293		       20 59 f2 	      jsr	setuppointers
   1001  f296		       84 9c		      sty	temp1	; store memory location offset
   1002  f298		       e6 9e		      inc	temp3	; increase final x by 1
   1003  f29a		       a5 9e		      lda	temp3
   1004  f29c		       0a		      asl
   1005  f29d					      if	pfwidth=4
   1006  f29d		       0a		      asl		; multiply by 4
   1007  f29e					      endif		; else multiply by 2
   1008  f29e		       85 9e		      sta	temp3	; store it
   1009  f2a0							; Thanks to Michael Rideout for fixing a bug in this code
   1010  f2a0							; right now, temp1=y=starting memory location, temp3=final
   1011  f2a0							; x should equal original x value
   1012  f2a0				   keepgoingy
   1013  f2a0		       20 ac f2 	      jsr	plotpoint
   1014  f2a3		       c8		      iny
   1015  f2a4		       c8		      iny
   1016  f2a5					      if	pfwidth=4
   1017  f2a5		       c8		      iny
   1018  f2a6		       c8		      iny
   1019  f2a7					      endif
   1020  f2a7		       c4 9e		      cpy	temp3
   1021  f2a9		       30 f5		      bmi	keepgoingy
      0  f2ab					      RETURN
      1  f2ab					      ifnconst	bankswitch
      2  f2ab		       60		      rts
      3  f2ac				  -	      else
      4  f2ac				  -	      jmp	BS_return
      5  f2ac					      endif
   1023  f2ac
   1024  f2ac				   plotpoint
   1025  f2ac		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1026  f2ae		       f0 0d		      beq	pixelon	; if "on" go to on
   1027  f2b0		       4a		      lsr
   1028  f2b1		       b0 14		      bcs	pixeloff	; value is 1 if true
   1029  f2b3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1030  f2b6		       5d d3 f2 	      eor	setbyte,x
   1031  f2b9				  -	      ifconst	superchip
   1032  f2b9				  -	      sta	playfield-128,y
   1033  f2b9					      else
   1034  f2b9		       99 a4 00 	      sta	playfield,y
   1035  f2bc					      endif
   1036  f2bc		       60		      rts
   1037  f2bd				   pixelon
   1038  f2bd		       b9 a4 00 	      lda	playfield,y
   1039  f2c0		       1d d3 f2 	      ora	setbyte,x
   1040  f2c3				  -	      ifconst	superchip
   1041  f2c3				  -	      sta	playfield-128,y
   1042  f2c3					      else
   1043  f2c3		       99 a4 00 	      sta	playfield,y
   1044  f2c6					      endif
   1045  f2c6		       60		      rts
   1046  f2c7				   pixeloff
   1047  f2c7		       bd d3 f2 	      lda	setbyte,x
   1048  f2ca		       49 ff		      eor	#$ff
   1049  f2cc		       39 a4 00 	      and	playfield,y
   1050  f2cf				  -	      ifconst	superchip
   1051  f2cf				  -	      sta	playfield-128,y
   1052  f2cf					      else
   1053  f2cf		       99 a4 00 	      sta	playfield,y
   1054  f2d2					      endif
   1055  f2d2		       60		      rts
   1056  f2d3
   1057  f2d3				   setbyte
   1058  f2d3					      ifnconst	pfcenter
   1059  f2d3		       80		      .byte.b	$80
   1060  f2d4		       40		      .byte.b	$40
   1061  f2d5		       20		      .byte.b	$20
   1062  f2d6		       10		      .byte.b	$10
   1063  f2d7		       08		      .byte.b	$08
   1064  f2d8		       04		      .byte.b	$04
   1065  f2d9		       02		      .byte.b	$02
   1066  f2da		       01		      .byte.b	$01
   1067  f2db					      endif
   1068  f2db		       01		      .byte.b	$01
   1069  f2dc		       02		      .byte.b	$02
   1070  f2dd		       04		      .byte.b	$04
   1071  f2de		       08		      .byte.b	$08
   1072  f2df		       10		      .byte.b	$10
   1073  f2e0		       20		      .byte.b	$20
   1074  f2e1		       40		      .byte.b	$40
   1075  f2e2		       80		      .byte.b	$80
   1076  f2e3		       80		      .byte.b	$80
   1077  f2e4		       40		      .byte.b	$40
   1078  f2e5		       20		      .byte.b	$20
   1079  f2e6		       10		      .byte.b	$10
   1080  f2e7		       08		      .byte.b	$08
   1081  f2e8		       04		      .byte.b	$04
   1082  f2e9		       02		      .byte.b	$02
   1083  f2ea		       01		      .byte.b	$01
   1084  f2eb		       01		      .byte.b	$01
   1085  f2ec		       02		      .byte.b	$02
   1086  f2ed		       04		      .byte.b	$04
   1087  f2ee		       08		      .byte.b	$08
   1088  f2ef		       10		      .byte.b	$10
   1089  f2f0		       20		      .byte.b	$20
   1090  f2f1		       40		      .byte.b	$40
   1091  f2f2		       80		      .byte.b	$80
   1092  f2f3				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1093  f2f3		       d0 13		      bne	notleft
   1094  f2f5							;left
   1095  f2f5				  -	      ifconst	pfres
   1096  f2f5				  -	      ldx	#pfres*4
   1097  f2f5					      else
   1098  f2f5		       a2 30		      ldx	#48
   1099  f2f7					      endif
   1100  f2f7				   leftloop
   1101  f2f7		       b5 a3		      lda	playfield-1,x
   1102  f2f9		       4a		      lsr
   1103  f2fa
   1104  f2fa				  -	      ifconst	superchip
   1105  f2fa				  -	      lda	playfield-2,x
   1106  f2fa				  -	      rol
   1107  f2fa				  -	      sta	playfield-130,x
   1108  f2fa				  -	      lda	playfield-3,x
   1109  f2fa				  -	      ror
   1110  f2fa				  -	      sta	playfield-131,x
   1111  f2fa				  -	      lda	playfield-4,x
   1112  f2fa				  -	      rol
   1113  f2fa				  -	      sta	playfield-132,x
   1114  f2fa				  -	      lda	playfield-1,x
   1115  f2fa				  -	      ror
   1116  f2fa				  -	      sta	playfield-129,x
   1117  f2fa					      else
   1118  f2fa		       36 a2		      rol	playfield-2,x
   1119  f2fc		       76 a1		      ror	playfield-3,x
   1120  f2fe		       36 a0		      rol	playfield-4,x
   1121  f300		       76 a3		      ror	playfield-1,x
   1122  f302					      endif
   1123  f302
   1124  f302		       8a		      txa
   1125  f303		       cb 04		      sbx	#4
   1126  f305		       d0 f0		      bne	leftloop
      0  f307					      RETURN
      1  f307					      ifnconst	bankswitch
      2  f307		       60		      rts
      3  f308				  -	      else
      4  f308				  -	      jmp	BS_return
      5  f308					      endif
   1128  f308
   1129  f308				   notleft
   1130  f308		       4a		      lsr
   1131  f309		       90 13		      bcc	notright
   1132  f30b							;right
   1133  f30b
   1134  f30b				  -	      ifconst	pfres
   1135  f30b				  -	      ldx	#pfres*4
   1136  f30b					      else
   1137  f30b		       a2 30		      ldx	#48
   1138  f30d					      endif
   1139  f30d				   rightloop
   1140  f30d		       b5 a0		      lda	playfield-4,x
   1141  f30f		       4a		      lsr
   1142  f310				  -	      ifconst	superchip
   1143  f310				  -	      lda	playfield-3,x
   1144  f310				  -	      rol
   1145  f310				  -	      sta	playfield-131,x
   1146  f310				  -	      lda	playfield-2,x
   1147  f310				  -	      ror
   1148  f310				  -	      sta	playfield-130,x
   1149  f310				  -	      lda	playfield-1,x
   1150  f310				  -	      rol
   1151  f310				  -	      sta	playfield-129,x
   1152  f310				  -	      lda	playfield-4,x
   1153  f310				  -	      ror
   1154  f310				  -	      sta	playfield-132,x
   1155  f310					      else
   1156  f310		       36 a1		      rol	playfield-3,x
   1157  f312		       76 a2		      ror	playfield-2,x
   1158  f314		       36 a3		      rol	playfield-1,x
   1159  f316		       76 a0		      ror	playfield-4,x
   1160  f318					      endif
   1161  f318		       8a		      txa
   1162  f319		       cb 04		      sbx	#4
   1163  f31b		       d0 f0		      bne	rightloop
      0  f31d					      RETURN
      1  f31d					      ifnconst	bankswitch
      2  f31d		       60		      rts
      3  f31e				  -	      else
      4  f31e				  -	      jmp	BS_return
      5  f31e					      endif
   1165  f31e
   1166  f31e				   notright
   1167  f31e		       4a		      lsr
   1168  f31f		       90 49		      bcc	notup
   1169  f321							;up
   1170  f321		       4a		      lsr
   1171  f322		       90 02		      bcc	onedecup
   1172  f324		       c6 ef		      dec	playfieldpos
   1173  f326				   onedecup
   1174  f326		       c6 ef		      dec	playfieldpos
   1175  f328		       f0 02		      beq	shiftdown
   1176  f32a		       10 3d		      bpl	noshiftdown2
   1177  f32c				   shiftdown
   1178  f32c				  -	      ifconst	pfrowheight
   1179  f32c				  -	      lda	#pfrowheight
   1180  f32c					      else
   1181  f32c					      ifnconst	pfres
   1182  f32c		       a9 08		      lda	#8
   1183  f32e				  -	      else
   1184  f32e				  -	      lda	#(96/pfres)	; try to come close to the real size
   1185  f32e					      endif
   1186  f32e					      endif
   1187  f32e
   1188  f32e		       85 ef		      sta	playfieldpos
   1189  f330		       a5 a7		      lda	playfield+3
   1190  f332		       85 9f		      sta	temp4
   1191  f334		       a5 a6		      lda	playfield+2
   1192  f336		       85 9e		      sta	temp3
   1193  f338		       a5 a5		      lda	playfield+1
   1194  f33a		       85 9d		      sta	temp2
   1195  f33c		       a5 a4		      lda	playfield
   1196  f33e		       85 9c		      sta	temp1
   1197  f340		       a2 00		      ldx	#0
   1198  f342				   up2
   1199  f342		       b5 a8		      lda	playfield+4,x
   1200  f344				  -	      ifconst	superchip
   1201  f344				  -	      sta	playfield-128,x
   1202  f344				  -	      lda	playfield+5,x
   1203  f344				  -	      sta	playfield-127,x
   1204  f344				  -	      lda	playfield+6,x
   1205  f344				  -	      sta	playfield-126,x
   1206  f344				  -	      lda	playfield+7,x
   1207  f344				  -	      sta	playfield-125,x
   1208  f344					      else
   1209  f344		       95 a4		      sta	playfield,x
   1210  f346		       b5 a9		      lda	playfield+5,x
   1211  f348		       95 a5		      sta	playfield+1,x
   1212  f34a		       b5 aa		      lda	playfield+6,x
   1213  f34c		       95 a6		      sta	playfield+2,x
   1214  f34e		       b5 ab		      lda	playfield+7,x
   1215  f350		       95 a7		      sta	playfield+3,x
   1216  f352					      endif
   1217  f352		       8a		      txa
   1218  f353		       cb fc		      sbx	#252
   1219  f355				  -	      ifconst	pfres
   1220  f355				  -	      cpx	#(pfres-1)*4
   1221  f355					      else
   1222  f355		       e0 2c		      cpx	#44
   1223  f357					      endif
   1224  f357		       d0 e9		      bne	up2
   1225  f359
   1226  f359		       a5 9f		      lda	temp4
   1227  f35b
   1228  f35b				  -	      ifconst	superchip
   1229  f35b				  -	      ifconst	pfres
   1230  f35b				  -	      sta	playfield+pfres*4-129
   1231  f35b				  -	      lda	temp3
   1232  f35b				  -	      sta	playfield+pfres*4-130
   1233  f35b				  -	      lda	temp2
   1234  f35b				  -	      sta	playfield+pfres*4-131
   1235  f35b				  -	      lda	temp1
   1236  f35b				  -	      sta	playfield+pfres*4-132
   1237  f35b				  -	      else
   1238  f35b				  -	      sta	playfield+47-128
   1239  f35b				  -	      lda	temp3
   1240  f35b				  -	      sta	playfield+46-128
   1241  f35b				  -	      lda	temp2
   1242  f35b				  -	      sta	playfield+45-128
   1243  f35b				  -	      lda	temp1
   1244  f35b				  -	      sta	playfield+44-128
   1245  f35b				  -	      endif
   1246  f35b					      else
   1247  f35b				  -	      ifconst	pfres
   1248  f35b				  -	      sta	playfield+pfres*4-1
   1249  f35b				  -	      lda	temp3
   1250  f35b				  -	      sta	playfield+pfres*4-2
   1251  f35b				  -	      lda	temp2
   1252  f35b				  -	      sta	playfield+pfres*4-3
   1253  f35b				  -	      lda	temp1
   1254  f35b				  -	      sta	playfield+pfres*4-4
   1255  f35b					      else
   1256  f35b		       85 d3		      sta	playfield+47
   1257  f35d		       a5 9e		      lda	temp3
   1258  f35f		       85 d2		      sta	playfield+46
   1259  f361		       a5 9d		      lda	temp2
   1260  f363		       85 d1		      sta	playfield+45
   1261  f365		       a5 9c		      lda	temp1
   1262  f367		       85 d0		      sta	playfield+44
   1263  f369					      endif
   1264  f369					      endif
   1265  f369				   noshiftdown2
      0  f369					      RETURN
      1  f369					      ifnconst	bankswitch
      2  f369		       60		      rts
      3  f36a				  -	      else
      4  f36a				  -	      jmp	BS_return
      5  f36a					      endif
   1267  f36a
   1268  f36a
   1269  f36a				   notup
   1270  f36a							;down
   1271  f36a		       4a		      lsr
   1272  f36b		       b0 02		      bcs	oneincup
   1273  f36d		       e6 ef		      inc	playfieldpos
   1274  f36f				   oneincup
   1275  f36f		       e6 ef		      inc	playfieldpos
   1276  f371		       a5 ef		      lda	playfieldpos
   1277  f373
   1278  f373				  -	      ifconst	pfrowheight
   1279  f373				  -	      cmp	#pfrowheight+1
   1280  f373					      else
   1281  f373					      ifnconst	pfres
   1282  f373		       c9 09		      cmp	#9
   1283  f375				  -	      else
   1284  f375				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1285  f375					      endif
   1286  f375					      endif
   1287  f375
   1288  f375		       90 3b		      bcc	noshiftdown
   1289  f377		       a9 01		      lda	#1
   1290  f379		       85 ef		      sta	playfieldpos
   1291  f37b
   1292  f37b				  -	      ifconst	pfres
   1293  f37b				  -	      lda	playfield+pfres*4-1
   1294  f37b				  -	      sta	temp4
   1295  f37b				  -	      lda	playfield+pfres*4-2
   1296  f37b				  -	      sta	temp3
   1297  f37b				  -	      lda	playfield+pfres*4-3
   1298  f37b				  -	      sta	temp2
   1299  f37b				  -	      lda	playfield+pfres*4-4
   1300  f37b					      else
   1301  f37b		       a5 d3		      lda	playfield+47
   1302  f37d		       85 9f		      sta	temp4
   1303  f37f		       a5 d2		      lda	playfield+46
   1304  f381		       85 9e		      sta	temp3
   1305  f383		       a5 d1		      lda	playfield+45
   1306  f385		       85 9d		      sta	temp2
   1307  f387		       a5 d0		      lda	playfield+44
   1308  f389					      endif
   1309  f389
   1310  f389		       85 9c		      sta	temp1
   1311  f38b
   1312  f38b				  -	      ifconst	pfres
   1313  f38b				  -	      ldx	#(pfres-1)*4
   1314  f38b					      else
   1315  f38b		       a2 2c		      ldx	#44
   1316  f38d					      endif
   1317  f38d				   down2
   1318  f38d		       b5 a3		      lda	playfield-1,x
   1319  f38f				  -	      ifconst	superchip
   1320  f38f				  -	      sta	playfield-125,x
   1321  f38f				  -	      lda	playfield-2,x
   1322  f38f				  -	      sta	playfield-126,x
   1323  f38f				  -	      lda	playfield-3,x
   1324  f38f				  -	      sta	playfield-127,x
   1325  f38f				  -	      lda	playfield-4,x
   1326  f38f				  -	      sta	playfield-128,x
   1327  f38f					      else
   1328  f38f		       95 a7		      sta	playfield+3,x
   1329  f391		       b5 a2		      lda	playfield-2,x
   1330  f393		       95 a6		      sta	playfield+2,x
   1331  f395		       b5 a1		      lda	playfield-3,x
   1332  f397		       95 a5		      sta	playfield+1,x
   1333  f399		       b5 a0		      lda	playfield-4,x
   1334  f39b		       95 a4		      sta	playfield,x
   1335  f39d					      endif
   1336  f39d		       8a		      txa
   1337  f39e		       cb 04		      sbx	#4
   1338  f3a0		       d0 eb		      bne	down2
   1339  f3a2
   1340  f3a2		       a5 9f		      lda	temp4
   1341  f3a4				  -	      ifconst	superchip
   1342  f3a4				  -	      sta	playfield-125
   1343  f3a4				  -	      lda	temp3
   1344  f3a4				  -	      sta	playfield-126
   1345  f3a4				  -	      lda	temp2
   1346  f3a4				  -	      sta	playfield-127
   1347  f3a4				  -	      lda	temp1
   1348  f3a4				  -	      sta	playfield-128
   1349  f3a4					      else
   1350  f3a4		       85 a7		      sta	playfield+3
   1351  f3a6		       a5 9e		      lda	temp3
   1352  f3a8		       85 a6		      sta	playfield+2
   1353  f3aa		       a5 9d		      lda	temp2
   1354  f3ac		       85 a5		      sta	playfield+1
   1355  f3ae		       a5 9c		      lda	temp1
   1356  f3b0		       85 a4		      sta	playfield
   1357  f3b2					      endif
   1358  f3b2				   noshiftdown
      0  f3b2					      RETURN
      1  f3b2					      ifnconst	bankswitch
      2  f3b2		       60		      rts
      3  f3b3				  -	      else
      4  f3b3				  -	      jmp	BS_return
      5  f3b3					      endif
   1360  f3b3							;standard routines needed for pretty much all games
   1361  f3b3							; just the random number generator is left - maybe we should remove this asm file altogether?
   1362  f3b3							; repositioning code and score pointer setup moved to overscan
   1363  f3b3							; read switches, joysticks now compiler generated (more efficient)
   1364  f3b3
   1365  f3b3				   randomize
   1366  f3b3		       a5 a2		      lda	rand
   1367  f3b5		       4a		      lsr
   1368  f3b6				  -	      ifconst	rand16
   1369  f3b6				  -	      rol	rand16
   1370  f3b6					      endif
   1371  f3b6		       90 02		      bcc	noeor
   1372  f3b8		       49 b4		      eor	#$B4
   1373  f3ba				   noeor
   1374  f3ba		       85 a2		      sta	rand
   1375  f3bc				  -	      ifconst	rand16
   1376  f3bc				  -	      eor	rand16
   1377  f3bc					      endif
      0  f3bc					      RETURN
      1  f3bc					      ifnconst	bankswitch
      2  f3bc		       60		      rts
      3  f3bd				  -	      else
      4  f3bd				  -	      jmp	BS_return
      5  f3bd					      endif
   1379  f3bd				   drawscreen
   1380  f3bd				  -	      ifconst	debugscore
   1381  f3bd				  -	      ldx	#14
   1382  f3bd				  -	      lda	INTIM	; display # cycles left in the score
   1383  f3bd				  -
   1384  f3bd				  -	      ifconst	mincycles
   1385  f3bd				  -	      lda	mincycles
   1386  f3bd				  -	      cmp	INTIM
   1387  f3bd				  -	      lda	mincycles
   1388  f3bd				  -	      bcc	nochange
   1389  f3bd				  -	      lda	INTIM
   1390  f3bd				  -	      sta	mincycles
   1391  f3bd				  -nochange
   1392  f3bd				  -	      endif
   1393  f3bd				  -
   1394  f3bd				  -			; cmp #$2B
   1395  f3bd				  -			; bcs no_cycles_left
   1396  f3bd				  -	      bmi	cycles_left
   1397  f3bd				  -	      ldx	#64
   1398  f3bd				  -	      eor	#$ff	;make negative
   1399  f3bd				  -cycles_left
   1400  f3bd				  -	      stx	scorecolor
   1401  f3bd				  -	      and	#$7f	; clear sign bit
   1402  f3bd				  -	      tax
   1403  f3bd				  -	      lda	scorebcd,x
   1404  f3bd				  -	      sta	score+2
   1405  f3bd				  -	      lda	scorebcd1,x
   1406  f3bd				  -	      sta	score+1
   1407  f3bd				  -	      jmp	done_debugscore
   1408  f3bd				  -scorebcd
   1409  f3bd				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1410  f3bd				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1411  f3bd				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1412  f3bd				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1413  f3bd				  -scorebcd1
   1414  f3bd				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1415  f3bd				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1416  f3bd				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1417  f3bd				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1418  f3bd				  -done_debugscore
   1419  f3bd					      endif
   1420  f3bd
   1421  f3bd				  -	      ifconst	debugcycles
   1422  f3bd				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1423  f3bd				  -			; cmp #$2B
   1424  f3bd				  -			; BCC overscan
   1425  f3bd				  -	      bmi	overscan
   1426  f3bd				  -	      sta	COLUBK
   1427  f3bd				  -	      bcs	doneoverscan
   1428  f3bd					      endif
   1429  f3bd
   1430  f3bd				   overscan
   1431  f3bd				  -	      ifconst	interlaced
   1432  f3bd				  -	      PHP
   1433  f3bd				  -	      PLA
   1434  f3bd				  -	      EOR	#4	; flip interrupt bit
   1435  f3bd				  -	      PHA
   1436  f3bd				  -	      PLP
   1437  f3bd				  -	      AND	#4	; isolate the interrupt bit
   1438  f3bd				  -	      TAX		; save it for later
   1439  f3bd					      endif
   1440  f3bd
   1441  f3bd				   overscanloop
   1442  f3bd		       ad 84 02 	      lda	INTIM	;wait for sync
   1443  f3c0		       30 fb		      bmi	overscanloop
   1444  f3c2				   doneoverscan
   1445  f3c2
   1446  f3c2							;do VSYNC
   1447  f3c2
   1448  f3c2				  -	      ifconst	interlaced
   1449  f3c2				  -	      CPX	#4
   1450  f3c2				  -	      BNE	oddframevsync
   1451  f3c2					      endif
   1452  f3c2
   1453  f3c2		       a9 02		      lda	#2
   1454  f3c4		       85 02		      sta	WSYNC
   1455  f3c6		       85 00		      sta	VSYNC
   1456  f3c8		       85 02		      STA	WSYNC
   1457  f3ca		       85 02		      STA	WSYNC
   1458  f3cc		       4a		      lsr
   1459  f3cd		       85 02		      STA	WSYNC
   1460  f3cf		       85 00		      STA	VSYNC
   1461  f3d1		       85 01		      sta	VBLANK
   1462  f3d3					      ifnconst	overscan_time
   1463  f3d3		       a9 a5		      lda	#37+128
   1464  f3d5				  -	      else
   1465  f3d5				  -	      lda	#overscan_time+128
   1466  f3d5					      endif
   1467  f3d5		       8d 96 02 	      sta	TIM64T
   1468  f3d8
   1469  f3d8				  -	      ifconst	interlaced
   1470  f3d8				  -	      jmp	postsync
   1471  f3d8				  -
   1472  f3d8				  -oddframevsync
   1473  f3d8				  -	      sta	WSYNC
   1474  f3d8				  -
   1475  f3d8				  -	      LDA	($80,X)	; 11 waste
   1476  f3d8				  -	      LDA	($80,X)	; 11 waste
   1477  f3d8				  -	      LDA	($80,X)	; 11 waste
   1478  f3d8				  -
   1479  f3d8				  -	      lda	#2
   1480  f3d8				  -	      sta	VSYNC
   1481  f3d8				  -	      sta	WSYNC
   1482  f3d8				  -	      sta	WSYNC
   1483  f3d8				  -	      sta	WSYNC
   1484  f3d8				  -
   1485  f3d8				  -	      LDA	($80,X)	; 11 waste
   1486  f3d8				  -	      LDA	($80,X)	; 11 waste
   1487  f3d8				  -	      LDA	($80,X)	; 11 waste
   1488  f3d8				  -
   1489  f3d8				  -	      lda	#0
   1490  f3d8				  -	      sta	VSYNC
   1491  f3d8				  -	      sta	VBLANK
   1492  f3d8				  -	      ifnconst	overscan_time
   1493  f3d8				  -	      lda	#37+128
   1494  f3d8				  -	      else
   1495  f3d8				  -	      lda	#overscan_time+128
   1496  f3d8				  -	      endif
   1497  f3d8				  -	      sta	TIM64T
   1498  f3d8				  -
   1499  f3d8				  -postsync
   1500  f3d8					      endif
   1501  f3d8
   1502  f3d8				  -	      ifconst	legacy
   1503  f3d8				  -	      if	legacy < 100
   1504  f3d8				  -	      ldx	#4
   1505  f3d8				  -adjustloop
   1506  f3d8				  -	      lda	player0x,x
   1507  f3d8				  -	      sec
   1508  f3d8				  -	      sbc	#14	;?
   1509  f3d8				  -	      sta	player0x,x
   1510  f3d8				  -	      dex
   1511  f3d8				  -	      bpl	adjustloop
   1512  f3d8				  -	      endif
   1513  f3d8					      endif
   1514  f3d8				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1515  f3d8				  -	      repeat	($fa-(<*))
   1516  f3d8				  -	      nop
   1517  f3d8				  -	      repend
   1518  f3d8					      endif
   1519  f3d8		       85 02		      sta	WSYNC
   1520  f3da		       a2 04		      ldx	#4
      0  f3dc					      SLEEP	3
      1  f3dc				   .CYCLES    SET	3
      2  f3dc
      3  f3dc				  -	      IF	.CYCLES < 2
      4  f3dc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3dc				  -	      ERR
      6  f3dc					      ENDIF
      7  f3dc
      8  f3dc					      IF	.CYCLES & 1
      9  f3dc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3dc		       04 00		      nop	0
     11  f3de				  -	      ELSE
     12  f3de				  -	      bit	VSYNC
     13  f3de					      ENDIF
     14  f3de				   .CYCLES    SET	.CYCLES - 3
     15  f3de					      ENDIF
     16  f3de
     17  f3de				  -	      REPEAT	.CYCLES / 2
     18  f3de				  -	      nop
     19  f3de					      REPEND
   1522  f3de				   HorPosLoop		; 5
   1523  f3de		       b5 80		      lda	player0x,X	;+4 9
   1524  f3e0		       38		      sec		;+2 11
   1525  f3e1				   DivideLoop
   1526  f3e1		       e9 0f		      sbc	#15
   1527  f3e3		       b0 fc		      bcs	DivideLoop	;+4 15
   1528  f3e5		       95 9c		      sta	temp1,X	;+4 19
   1529  f3e7		       95 10		      sta	RESP0,X	;+4 23
   1530  f3e9		       85 02		      sta	WSYNC
   1531  f3eb		       ca		      dex
   1532  f3ec		       10 f0		      bpl	HorPosLoop	;+5 5
   1533  f3ee							; 4
   1534  f3ee
   1535  f3ee		       a2 04		      ldx	#4
   1536  f3f0		       b4 9c		      ldy	temp1,X
   1537  f3f2		       b9 4e f3 	      lda	repostable-256,Y
   1538  f3f5		       95 20		      sta	HMP0,X	;+14 18
   1539  f3f7
   1540  f3f7		       ca		      dex
   1541  f3f8		       b4 9c		      ldy	temp1,X
   1542  f3fa		       b9 4e f3 	      lda	repostable-256,Y
   1543  f3fd		       95 20		      sta	HMP0,X	;+14 32
   1544  f3ff
   1545  f3ff		       ca		      dex
   1546  f400		       b4 9c		      ldy	temp1,X
   1547  f402		       b9 4e f3 	      lda	repostable-256,Y
   1548  f405		       95 20		      sta	HMP0,X	;+14 46
   1549  f407
   1550  f407		       ca		      dex
   1551  f408		       b4 9c		      ldy	temp1,X
   1552  f40a		       b9 4e f3 	      lda	repostable-256,Y
   1553  f40d		       95 20		      sta	HMP0,X	;+14 60
   1554  f40f
   1555  f40f		       ca		      dex
   1556  f410		       b4 9c		      ldy	temp1,X
   1557  f412		       b9 4e f3 	      lda	repostable-256,Y
   1558  f415		       95 20		      sta	HMP0,X	;+14 74
   1559  f417
   1560  f417		       85 02		      sta	WSYNC
   1561  f419
   1562  f419		       85 2a		      sta	HMOVE	;+3 3
   1563  f41b
   1564  f41b
   1565  f41b				  -	      ifconst	legacy
   1566  f41b				  -	      if	legacy < 100
   1567  f41b				  -	      ldx	#4
   1568  f41b				  -adjustloop2
   1569  f41b				  -	      lda	player0x,x
   1570  f41b				  -	      clc
   1571  f41b				  -	      adc	#14	;?
   1572  f41b				  -	      sta	player0x,x
   1573  f41b				  -	      dex
   1574  f41b				  -	      bpl	adjustloop2
   1575  f41b				  -	      endif
   1576  f41b					      endif
   1577  f41b
   1578  f41b
   1579  f41b
   1580  f41b
   1581  f41b							;set score pointers
   1582  f41b		       a7 95		      lax	score+2
   1583  f41d		       20 4e f4 	      jsr	scorepointerset
   1584  f420		       84 9b		      sty	scorepointers+5
   1585  f422		       86 98		      stx	scorepointers+2
   1586  f424		       a7 94		      lax	score+1
   1587  f426		       20 4e f4 	      jsr	scorepointerset
   1588  f429		       84 9a		      sty	scorepointers+4
   1589  f42b		       86 97		      stx	scorepointers+1
   1590  f42d		       a7 93		      lax	score
   1591  f42f		       20 4e f4 	      jsr	scorepointerset
   1592  f432		       84 99		      sty	scorepointers+3
   1593  f434		       86 96		      stx	scorepointers
   1594  f436
   1595  f436				   vblk
   1596  f436							; run possible vblank bB code
   1597  f436				  -	      ifconst	vblank_bB_code
   1598  f436				  -	      jsr	vblank_bB_code
   1599  f436					      endif
   1600  f436				   vblk2
   1601  f436		       ad 84 02 	      LDA	INTIM
   1602  f439		       30 fb		      bmi	vblk2
   1603  f43b		       4c 34 f0 	      jmp	kernel
   1604  f43e
   1605  f43e
   1606  f43e		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1607  f447		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1608  f44e				   repostable
   1609  f44e
   1610  f44e				   scorepointerset
   1611  f44e		       29 0f		      and	#$0F
   1612  f450		       0a		      asl
   1613  f451		       0a		      asl
   1614  f452		       0a		      asl
   1615  f453		       69 9c		      adc	#<scoretable
   1616  f455		       a8		      tay
   1617  f456		       8a		      txa
   1618  f457							; and #$F0
   1619  f457							; lsr
   1620  f457		       4b f0		      asr	#$F0
   1621  f459		       69 9c		      adc	#<scoretable
   1622  f45b		       aa		      tax
   1623  f45c		       60		      rts
   1624  f45d				   game
   1625  f45d				   .L00 		;  rem Generated 12/3/2017 10:17:28 AM by Visual bB Version 1.0.0.554
   1626  f45d
   1627  f45d				   .L01 		;  rem Atari racing game created for Georgia Tech LMC 2700 Fall 2017
   1628  f45d
   1629  f45d				   .L02 		;  rem Created By: Alexus Clark, Ye-Ji Kim, Kevin Tang
   1630  f45d
   1631  f45d				   .
   1632  f45d							;
   1633  f45d
   1634  f45d				   .L03 		;  set romsize  =  2k
   1635  f45d
   1636  f45d				   .
   1637  f45d							;
   1638  f45d
   1639  f45d				   .L04 		;  rem player sprites
   1640  f45d
   1641  f45d				   .L05 		;  player0:
   1642  f45d
   1643  f45d		       a2 52		      LDX	#<playerL05_0
   1644  f45f		       86 8a		      STX	player0pointerlo
   1645  f461		       a9 fc		      LDA	#>playerL05_0
   1646  f463		       85 8b		      STA	player0pointerhi
   1647  f465		       a9 0b		      LDA	#11
   1648  f467		       85 8e		      STA	player0height
   1649  f469				   .L06 		;  player0color:
   1650  f469
   1651  f469		       a2 5e		      LDX	#<playercolorL06_0
   1652  f46b		       86 90		      STX	player0color
   1653  f46d		       a9 fc		      LDA	#>playercolorL06_0
   1654  f46f		       85 91		      STA	player0color+1
   1655  f471				   .
   1656  f471							;
   1657  f471
   1658  f471				   .L07 		;  player1:
   1659  f471
   1660  f471		       a2 6a		      LDX	#<playerL07_1
   1661  f473		       86 8c		      STX	player1pointerlo
   1662  f475		       a9 fc		      LDA	#>playerL07_1
   1663  f477		       85 8d		      STA	player1pointerhi
   1664  f479		       a9 0b		      LDA	#11
   1665  f47b		       85 8f		      STA	player1height
   1666  f47d				   .L08 		;  player1color:
   1667  f47d
   1668  f47d		       a2 76		      LDX	#<playercolorL08_1
   1669  f47f		       86 87		      STX	player1color
   1670  f481		       a9 fc		      LDA	#>playercolorL08_1
   1671  f483		       85 88		      STA	player1color+1
   1672  f485				   .
   1673  f485							;
   1674  f485
   1675  f485				   .L09 		;  rem Idle start screen
   1676  f485
   1677  f485				   .startscreen
   1678  f485							; startscreen
   1679  f485
   1680  f485				   .
   1681  f485							;
   1682  f485
   1683  f485				   .L010		;  set kernel_options player1colors playercolors pfcolors
   1684  f485
   1685  f485				   .L011		;  pfcolors:
   1686  f485
   1687  f485		       a9 06		      lda	# 6
   1688  f487		       85 08		      sta	COLUPF
   1689  f489				  -	      ifconst	pfres
   1690  f489				  -	      lda	#>(pfcolorlabel77-132+pfres*pfwidth)
   1691  f489					      else
   1692  f489		       a9 fc		      lda	#>(pfcolorlabel77-84)
   1693  f48b					      endif
   1694  f48b		       85 f1		      sta	pfcolortable+1
   1695  f48d				  -	      ifconst	pfres
   1696  f48d				  -	      lda	#<(pfcolorlabel77-132+pfres*pfwidth)
   1697  f48d					      else
   1698  f48d		       a9 2e		      lda	#<(pfcolorlabel77-84)
   1699  f48f					      endif
   1700  f48f		       85 f0		      sta	pfcolortable
   1701  f491				   .
   1702  f491							;
   1703  f491
   1704  f491				   .L012		;  playfield:
   1705  f491
   1706  f491				  -	      ifconst	pfres
   1707  f491				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   1708  f491					      else
   1709  f491		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   1710  f493					      endif
   1711  f493		       4c c2 f4 	      jmp	pflabel0
   1712  f496				   PF_data0
   1713  f496		       00 00		      .byte.b	%00000000, %00000000
   1714  f498					      if	(pfwidth>2)
   1715  f498		       00 00		      .byte.b	%00000000, %00000000
   1716  f49a					      endif
   1717  f49a		       00 00		      .byte.b	%00000000, %00000000
   1718  f49c					      if	(pfwidth>2)
   1719  f49c		       00 00		      .byte.b	%00000000, %00000000
   1720  f49e					      endif
   1721  f49e		       00 00		      .byte.b	%00000000, %00000000
   1722  f4a0					      if	(pfwidth>2)
   1723  f4a0		       00 00		      .byte.b	%00000000, %00000000
   1724  f4a2					      endif
   1725  f4a2		       00 00		      .byte.b	%00000000, %00000000
   1726  f4a4					      if	(pfwidth>2)
   1727  f4a4		       00 00		      .byte.b	%00000000, %00000000
   1728  f4a6					      endif
   1729  f4a6		       02 00		      .byte.b	%00000010, %00000000
   1730  f4a8					      if	(pfwidth>2)
   1731  f4a8		       03 00		      .byte.b	%00000011, %00000000
   1732  f4aa					      endif
   1733  f4aa		       06 00		      .byte.b	%00000110, %00000000
   1734  f4ac					      if	(pfwidth>2)
   1735  f4ac		       04 01		      .byte.b	%00000100, %00000001
   1736  f4ae					      endif
   1737  f4ae		       02 00		      .byte.b	%00000010, %00000000
   1738  f4b0					      if	(pfwidth>2)
   1739  f4b0		       01 00		      .byte.b	%00000001, %00000000
   1740  f4b2					      endif
   1741  f4b2		       02 00		      .byte.b	%00000010, %00000000
   1742  f4b4					      if	(pfwidth>2)
   1743  f4b4		       02 00		      .byte.b	%00000010, %00000000
   1744  f4b6					      endif
   1745  f4b6		       0f 01		      .byte.b	%00001111, %00000001
   1746  f4b8					      if	(pfwidth>2)
   1747  f4b8		       07 01		      .byte.b	%00000111, %00000001
   1748  f4ba					      endif
   1749  f4ba		       00 00		      .byte.b	%00000000, %00000000
   1750  f4bc					      if	(pfwidth>2)
   1751  f4bc		       00 00		      .byte.b	%00000000, %00000000
   1752  f4be					      endif
   1753  f4be		       00 00		      .byte.b	%00000000, %00000000
   1754  f4c0					      if	(pfwidth>2)
   1755  f4c0		       00 00		      .byte.b	%00000000, %00000000
   1756  f4c2					      endif
   1757  f4c2				   pflabel0
   1758  f4c2		       bd 96 f4 	      lda	PF_data0,x
   1759  f4c5		       95 a4		      sta	playfield,x
   1760  f4c7		       ca		      dex
   1761  f4c8		       10 f8		      bpl	pflabel0
   1762  f4ca				   .
   1763  f4ca							;
   1764  f4ca
   1765  f4ca				   .L013		;  f  =  f  +	1
   1766  f4ca
   1767  f4ca		       e6 d9		      INC	f
   1768  f4cc				   .L014		;  if f  =  61 then f	=  12
   1769  f4cc
   1770  f4cc		       a5 d9		      LDA	f
   1771  f4ce		       c9 3d		      CMP	#61
   1772  f4d0		       d0 04		      BNE	.skipL014
   1773  f4d2				   .condpart0
   1774  f4d2		       a9 0c		      LDA	#12
   1775  f4d4		       85 d9		      STA	f
   1776  f4d6				   .skipL014
   1777  f4d6				   .
   1778  f4d6							;
   1779  f4d6
   1780  f4d6				   .L015		;  player0x = 40 : player0y = 85
   1781  f4d6
   1782  f4d6		       a9 28		      LDA	#40
   1783  f4d8		       85 80		      STA	player0x
   1784  f4da		       a9 55		      LDA	#85
   1785  f4dc		       85 85		      STA	player0y
   1786  f4de				   .L016		;  player1x = 105 : player1y = 85
   1787  f4de
   1788  f4de		       a9 69		      LDA	#105
   1789  f4e0		       85 81		      STA	player1x
   1790  f4e2		       a9 55		      LDA	#85
   1791  f4e4		       85 86		      STA	player1y
   1792  f4e6				   .L017		;  drawscreen
   1793  f4e6
   1794  f4e6		       20 bd f3 	      jsr	drawscreen
   1795  f4e9				   .L018		;  if joy0fire then goto gamestart
   1796  f4e9
   1797  f4e9		       24 0c		      bit	INPT4
   1798  f4eb		       30 03		      BMI	.skipL018
   1799  f4ed				   .condpart1
   1800  f4ed		       4c f3 f4 	      jmp	.gamestart
   1801  f4f0
   1802  f4f0				   .skipL018
   1803  f4f0				   .L019		;  goto startscreen
   1804  f4f0
   1805  f4f0		       4c 85 f4 	      jmp	.startscreen
   1806  f4f3
   1807  f4f3				   .
   1808  f4f3							;
   1809  f4f3
   1810  f4f3				   .gamestart
   1811  f4f3							; gamestart
   1812  f4f3
   1813  f4f3				   .L020		;  const pfscore  =  1
   1814  f4f3
   1815  f4f3				   .
   1816  f4f3							;
   1817  f4f3
   1818  f4f3				   .L021		;  pfscorecolor  =  $9c
   1819  f4f3
   1820  f4f3		       a9 9c		      LDA	#$9c
   1821  f4f5		       85 f4		      STA	pfscorecolor
   1822  f4f7				   .L022		;  pfscore1  =  %00000000
   1823  f4f7
   1824  f4f7		       a9 00		      LDA	#%00000000
   1825  f4f9		       85 f2		      STA	pfscore1
   1826  f4fb				   .L023		;  pfscore2  =  %00000000
   1827  f4fb
   1828  f4fb		       a9 00		      LDA	#%00000000
   1829  f4fd		       85 f3		      STA	pfscore2
   1830  f4ff				   .
   1831  f4ff							;
   1832  f4ff
   1833  f4ff				   .L024		;  player0x = 50 : player0y = 40
   1834  f4ff
   1835  f4ff		       a9 32		      LDA	#50
   1836  f501		       85 80		      STA	player0x
   1837  f503		       a9 28		      LDA	#40
   1838  f505		       85 85		      STA	player0y
   1839  f507				   .L025		;  player1x = 50 : player1y = 60
   1840  f507
   1841  f507		       a9 32		      LDA	#50
   1842  f509		       85 81		      STA	player1x
   1843  f50b		       a9 3c		      LDA	#60
   1844  f50d		       85 86		      STA	player1y
   1845  f50f				   .L026		;  g  =  0
   1846  f50f
   1847  f50f		       a9 00		      LDA	#0
   1848  f511		       85 da		      STA	g
   1849  f513				   .L027		;  ballheight	=  4
   1850  f513
   1851  f513		       a9 04		      LDA	#4
   1852  f515		       85 92		      STA	ballheight
   1853  f517				   .L028		;  CTRLPF  =  $21
   1854  f517
   1855  f517		       a9 21		      LDA	#$21
   1856  f519		       85 0a		      STA	CTRLPF
   1857  f51b				   .L029		;  h  =  1
   1858  f51b
   1859  f51b		       a9 01		      LDA	#1
   1860  f51d		       85 db		      STA	h
   1861  f51f				   .
   1862  f51f							;
   1863  f51f
   1864  f51f				   .
   1865  f51f							;
   1866  f51f
   1867  f51f				   .L030		;  rem start of the main draw loop
   1868  f51f
   1869  f51f				   .sprites
   1870  f51f							; sprites
   1871  f51f
   1872  f51f				   .L031		;  f  =  f  +	1
   1873  f51f
   1874  f51f		       e6 d9		      INC	f
   1875  f521				   .L032		;  g  =  g  +	1
   1876  f521
   1877  f521		       e6 da		      INC	g
   1878  f523				   .
   1879  f523							;
   1880  f523
   1881  f523				   .L033		;  rem animation of the street passing by
   1882  f523
   1883  f523				   .L034		;  if f  =  20  ||  f	=  45 then playfield:
   1884  f523
   1885  f523		       a5 d9		      LDA	f
   1886  f525		       c9 14		      CMP	#20
   1887  f527		       d0 03		      BNE	.skipL034
   1888  f529				   .condpart2
   1889  f529		       4c 32 f5 	      jmp	.condpart3
   1890  f52c				   .skipL034
   1891  f52c		       a5 d9		      LDA	f
   1892  f52e		       c9 2d		      CMP	#45
   1893  f530		       d0 39		      BNE	.skip0OR
   1894  f532				   .condpart3
   1895  f532				  -	      ifconst	pfres
   1896  f532				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   1897  f532					      else
   1898  f532		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   1899  f534					      endif
   1900  f534		       4c 63 f5 	      jmp	pflabel1
   1901  f537				   PF_data1
   1902  f537		       00 00		      .byte.b	%00000000, %00000000
   1903  f539					      if	(pfwidth>2)
   1904  f539		       00 00		      .byte.b	%00000000, %00000000
   1905  f53b					      endif
   1906  f53b		       ff ff		      .byte.b	%11111111, %11111111
   1907  f53d					      if	(pfwidth>2)
   1908  f53d		       ff ff		      .byte.b	%11111111, %11111111
   1909  f53f					      endif
   1910  f53f		       00 00		      .byte.b	%00000000, %00000000
   1911  f541					      if	(pfwidth>2)
   1912  f541		       00 00		      .byte.b	%00000000, %00000000
   1913  f543					      endif
   1914  f543		       00 00		      .byte.b	%00000000, %00000000
   1915  f545					      if	(pfwidth>2)
   1916  f545		       00 00		      .byte.b	%00000000, %00000000
   1917  f547					      endif
   1918  f547		       00 00		      .byte.b	%00000000, %00000000
   1919  f549					      if	(pfwidth>2)
   1920  f549		       00 00		      .byte.b	%00000000, %00000000
   1921  f54b					      endif
   1922  f54b		       00 00		      .byte.b	%00000000, %00000000
   1923  f54d					      if	(pfwidth>2)
   1924  f54d		       00 c0		      .byte.b	%00000000, %11000000
   1925  f54f					      endif
   1926  f54f		       00 00		      .byte.b	%00000000, %00000000
   1927  f551					      if	(pfwidth>2)
   1928  f551		       00 00		      .byte.b	%00000000, %00000000
   1929  f553					      endif
   1930  f553		       00 00		      .byte.b	%00000000, %00000000
   1931  f555					      if	(pfwidth>2)
   1932  f555		       00 00		      .byte.b	%00000000, %00000000
   1933  f557					      endif
   1934  f557		       00 00		      .byte.b	%00000000, %00000000
   1935  f559					      if	(pfwidth>2)
   1936  f559		       00 00		      .byte.b	%00000000, %00000000
   1937  f55b					      endif
   1938  f55b		       ff ff		      .byte.b	%11111111, %11111111
   1939  f55d					      if	(pfwidth>2)
   1940  f55d		       ff ff		      .byte.b	%11111111, %11111111
   1941  f55f					      endif
   1942  f55f		       00 00		      .byte.b	%00000000, %00000000
   1943  f561					      if	(pfwidth>2)
   1944  f561		       00 00		      .byte.b	%00000000, %00000000
   1945  f563					      endif
   1946  f563				   pflabel1
   1947  f563		       bd 37 f5 	      lda	PF_data1,x
   1948  f566		       95 a4		      sta	playfield,x
   1949  f568		       ca		      dex
   1950  f569		       10 f8		      bpl	pflabel1
   1951  f56b				   .skip0OR
   1952  f56b				   .L035		;  if f  =  21  ||  f	=  46 then playfield:
   1953  f56b
   1954  f56b		       a5 d9		      LDA	f
   1955  f56d		       c9 15		      CMP	#21
   1956  f56f		       d0 03		      BNE	.skipL035
   1957  f571				   .condpart4
   1958  f571		       4c 7a f5 	      jmp	.condpart5
   1959  f574				   .skipL035
   1960  f574		       a5 d9		      LDA	f
   1961  f576		       c9 2e		      CMP	#46
   1962  f578		       d0 39		      BNE	.skip1OR
   1963  f57a				   .condpart5
   1964  f57a				  -	      ifconst	pfres
   1965  f57a				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   1966  f57a					      else
   1967  f57a		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   1968  f57c					      endif
   1969  f57c		       4c ab f5 	      jmp	pflabel2
   1970  f57f				   PF_data2
   1971  f57f		       00 00		      .byte.b	%00000000, %00000000
   1972  f581					      if	(pfwidth>2)
   1973  f581		       00 00		      .byte.b	%00000000, %00000000
   1974  f583					      endif
   1975  f583		       ff ff		      .byte.b	%11111111, %11111111
   1976  f585					      if	(pfwidth>2)
   1977  f585		       ff ff		      .byte.b	%11111111, %11111111
   1978  f587					      endif
   1979  f587		       00 00		      .byte.b	%00000000, %00000000
   1980  f589					      if	(pfwidth>2)
   1981  f589		       00 00		      .byte.b	%00000000, %00000000
   1982  f58b					      endif
   1983  f58b		       00 00		      .byte.b	%00000000, %00000000
   1984  f58d					      if	(pfwidth>2)
   1985  f58d		       00 00		      .byte.b	%00000000, %00000000
   1986  f58f					      endif
   1987  f58f		       00 00		      .byte.b	%00000000, %00000000
   1988  f591					      if	(pfwidth>2)
   1989  f591		       00 00		      .byte.b	%00000000, %00000000
   1990  f593					      endif
   1991  f593		       00 00		      .byte.b	%00000000, %00000000
   1992  f595					      if	(pfwidth>2)
   1993  f595		       00 30		      .byte.b	%00000000, %00110000
   1994  f597					      endif
   1995  f597		       00 00		      .byte.b	%00000000, %00000000
   1996  f599					      if	(pfwidth>2)
   1997  f599		       00 00		      .byte.b	%00000000, %00000000
   1998  f59b					      endif
   1999  f59b		       00 00		      .byte.b	%00000000, %00000000
   2000  f59d					      if	(pfwidth>2)
   2001  f59d		       00 00		      .byte.b	%00000000, %00000000
   2002  f59f					      endif
   2003  f59f		       00 00		      .byte.b	%00000000, %00000000
   2004  f5a1					      if	(pfwidth>2)
   2005  f5a1		       00 00		      .byte.b	%00000000, %00000000
   2006  f5a3					      endif
   2007  f5a3		       ff ff		      .byte.b	%11111111, %11111111
   2008  f5a5					      if	(pfwidth>2)
   2009  f5a5		       ff ff		      .byte.b	%11111111, %11111111
   2010  f5a7					      endif
   2011  f5a7		       00 00		      .byte.b	%00000000, %00000000
   2012  f5a9					      if	(pfwidth>2)
   2013  f5a9		       00 00		      .byte.b	%00000000, %00000000
   2014  f5ab					      endif
   2015  f5ab				   pflabel2
   2016  f5ab		       bd 7f f5 	      lda	PF_data2,x
   2017  f5ae		       95 a4		      sta	playfield,x
   2018  f5b0		       ca		      dex
   2019  f5b1		       10 f8		      bpl	pflabel2
   2020  f5b3				   .skip1OR
   2021  f5b3				   .
   2022  f5b3							;
   2023  f5b3
   2024  f5b3				   .L036		;  if f  =  22  ||  f	=  47 then playfield:
   2025  f5b3
   2026  f5b3		       a5 d9		      LDA	f
   2027  f5b5		       c9 16		      CMP	#22
   2028  f5b7		       d0 03		      BNE	.skipL036
   2029  f5b9				   .condpart6
   2030  f5b9		       4c c2 f5 	      jmp	.condpart7
   2031  f5bc				   .skipL036
   2032  f5bc		       a5 d9		      LDA	f
   2033  f5be		       c9 2f		      CMP	#47
   2034  f5c0		       d0 39		      BNE	.skip2OR
   2035  f5c2				   .condpart7
   2036  f5c2				  -	      ifconst	pfres
   2037  f5c2				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2038  f5c2					      else
   2039  f5c2		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2040  f5c4					      endif
   2041  f5c4		       4c f3 f5 	      jmp	pflabel3
   2042  f5c7				   PF_data3
   2043  f5c7		       00 00		      .byte.b	%00000000, %00000000
   2044  f5c9					      if	(pfwidth>2)
   2045  f5c9		       00 00		      .byte.b	%00000000, %00000000
   2046  f5cb					      endif
   2047  f5cb		       ff ff		      .byte.b	%11111111, %11111111
   2048  f5cd					      if	(pfwidth>2)
   2049  f5cd		       ff ff		      .byte.b	%11111111, %11111111
   2050  f5cf					      endif
   2051  f5cf		       00 00		      .byte.b	%00000000, %00000000
   2052  f5d1					      if	(pfwidth>2)
   2053  f5d1		       00 00		      .byte.b	%00000000, %00000000
   2054  f5d3					      endif
   2055  f5d3		       00 00		      .byte.b	%00000000, %00000000
   2056  f5d5					      if	(pfwidth>2)
   2057  f5d5		       00 00		      .byte.b	%00000000, %00000000
   2058  f5d7					      endif
   2059  f5d7		       00 00		      .byte.b	%00000000, %00000000
   2060  f5d9					      if	(pfwidth>2)
   2061  f5d9		       00 00		      .byte.b	%00000000, %00000000
   2062  f5db					      endif
   2063  f5db		       00 00		      .byte.b	%00000000, %00000000
   2064  f5dd					      if	(pfwidth>2)
   2065  f5dd		       00 0c		      .byte.b	%00000000, %00001100
   2066  f5df					      endif
   2067  f5df		       00 00		      .byte.b	%00000000, %00000000
   2068  f5e1					      if	(pfwidth>2)
   2069  f5e1		       00 00		      .byte.b	%00000000, %00000000
   2070  f5e3					      endif
   2071  f5e3		       00 00		      .byte.b	%00000000, %00000000
   2072  f5e5					      if	(pfwidth>2)
   2073  f5e5		       00 00		      .byte.b	%00000000, %00000000
   2074  f5e7					      endif
   2075  f5e7		       00 00		      .byte.b	%00000000, %00000000
   2076  f5e9					      if	(pfwidth>2)
   2077  f5e9		       00 00		      .byte.b	%00000000, %00000000
   2078  f5eb					      endif
   2079  f5eb		       ff ff		      .byte.b	%11111111, %11111111
   2080  f5ed					      if	(pfwidth>2)
   2081  f5ed		       ff ff		      .byte.b	%11111111, %11111111
   2082  f5ef					      endif
   2083  f5ef		       00 00		      .byte.b	%00000000, %00000000
   2084  f5f1					      if	(pfwidth>2)
   2085  f5f1		       00 00		      .byte.b	%00000000, %00000000
   2086  f5f3					      endif
   2087  f5f3				   pflabel3
   2088  f5f3		       bd c7 f5 	      lda	PF_data3,x
   2089  f5f6		       95 a4		      sta	playfield,x
   2090  f5f8		       ca		      dex
   2091  f5f9		       10 f8		      bpl	pflabel3
   2092  f5fb				   .skip2OR
   2093  f5fb				   .L037		;  if f  =  23  ||  f	=  48 then playfield:
   2094  f5fb
   2095  f5fb		       a5 d9		      LDA	f
   2096  f5fd		       c9 17		      CMP	#23
   2097  f5ff		       d0 03		      BNE	.skipL037
   2098  f601				   .condpart8
   2099  f601		       4c 0a f6 	      jmp	.condpart9
   2100  f604				   .skipL037
   2101  f604		       a5 d9		      LDA	f
   2102  f606		       c9 30		      CMP	#48
   2103  f608		       d0 39		      BNE	.skip3OR
   2104  f60a				   .condpart9
   2105  f60a				  -	      ifconst	pfres
   2106  f60a				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2107  f60a					      else
   2108  f60a		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2109  f60c					      endif
   2110  f60c		       4c 3b f6 	      jmp	pflabel4
   2111  f60f				   PF_data4
   2112  f60f		       00 00		      .byte.b	%00000000, %00000000
   2113  f611					      if	(pfwidth>2)
   2114  f611		       00 00		      .byte.b	%00000000, %00000000
   2115  f613					      endif
   2116  f613		       ff ff		      .byte.b	%11111111, %11111111
   2117  f615					      if	(pfwidth>2)
   2118  f615		       ff ff		      .byte.b	%11111111, %11111111
   2119  f617					      endif
   2120  f617		       00 00		      .byte.b	%00000000, %00000000
   2121  f619					      if	(pfwidth>2)
   2122  f619		       00 00		      .byte.b	%00000000, %00000000
   2123  f61b					      endif
   2124  f61b		       00 00		      .byte.b	%00000000, %00000000
   2125  f61d					      if	(pfwidth>2)
   2126  f61d		       00 00		      .byte.b	%00000000, %00000000
   2127  f61f					      endif
   2128  f61f		       00 00		      .byte.b	%00000000, %00000000
   2129  f621					      if	(pfwidth>2)
   2130  f621		       00 00		      .byte.b	%00000000, %00000000
   2131  f623					      endif
   2132  f623		       00 00		      .byte.b	%00000000, %00000000
   2133  f625					      if	(pfwidth>2)
   2134  f625		       00 03		      .byte.b	%00000000, %00000011
   2135  f627					      endif
   2136  f627		       00 00		      .byte.b	%00000000, %00000000
   2137  f629					      if	(pfwidth>2)
   2138  f629		       00 00		      .byte.b	%00000000, %00000000
   2139  f62b					      endif
   2140  f62b		       00 00		      .byte.b	%00000000, %00000000
   2141  f62d					      if	(pfwidth>2)
   2142  f62d		       00 00		      .byte.b	%00000000, %00000000
   2143  f62f					      endif
   2144  f62f		       00 00		      .byte.b	%00000000, %00000000
   2145  f631					      if	(pfwidth>2)
   2146  f631		       00 00		      .byte.b	%00000000, %00000000
   2147  f633					      endif
   2148  f633		       ff ff		      .byte.b	%11111111, %11111111
   2149  f635					      if	(pfwidth>2)
   2150  f635		       ff ff		      .byte.b	%11111111, %11111111
   2151  f637					      endif
   2152  f637		       00 00		      .byte.b	%00000000, %00000000
   2153  f639					      if	(pfwidth>2)
   2154  f639		       00 00		      .byte.b	%00000000, %00000000
   2155  f63b					      endif
   2156  f63b				   pflabel4
   2157  f63b		       bd 0f f6 	      lda	PF_data4,x
   2158  f63e		       95 a4		      sta	playfield,x
   2159  f640		       ca		      dex
   2160  f641		       10 f8		      bpl	pflabel4
   2161  f643				   .skip3OR
   2162  f643				   .L038		;  if f  =  24  ||  f	=  49 then playfield:
   2163  f643
   2164  f643		       a5 d9		      LDA	f
   2165  f645		       c9 18		      CMP	#24
   2166  f647		       d0 03		      BNE	.skipL038
   2167  f649				   .condpart10
   2168  f649		       4c 52 f6 	      jmp	.condpart11
   2169  f64c				   .skipL038
   2170  f64c		       a5 d9		      LDA	f
   2171  f64e		       c9 31		      CMP	#49
   2172  f650		       d0 39		      BNE	.skip4OR
   2173  f652				   .condpart11
   2174  f652				  -	      ifconst	pfres
   2175  f652				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2176  f652					      else
   2177  f652		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2178  f654					      endif
   2179  f654		       4c 83 f6 	      jmp	pflabel5
   2180  f657				   PF_data5
   2181  f657		       00 00		      .byte.b	%00000000, %00000000
   2182  f659					      if	(pfwidth>2)
   2183  f659		       00 00		      .byte.b	%00000000, %00000000
   2184  f65b					      endif
   2185  f65b		       ff ff		      .byte.b	%11111111, %11111111
   2186  f65d					      if	(pfwidth>2)
   2187  f65d		       ff ff		      .byte.b	%11111111, %11111111
   2188  f65f					      endif
   2189  f65f		       00 00		      .byte.b	%00000000, %00000000
   2190  f661					      if	(pfwidth>2)
   2191  f661		       00 00		      .byte.b	%00000000, %00000000
   2192  f663					      endif
   2193  f663		       00 00		      .byte.b	%00000000, %00000000
   2194  f665					      if	(pfwidth>2)
   2195  f665		       00 00		      .byte.b	%00000000, %00000000
   2196  f667					      endif
   2197  f667		       00 00		      .byte.b	%00000000, %00000000
   2198  f669					      if	(pfwidth>2)
   2199  f669		       00 00		      .byte.b	%00000000, %00000000
   2200  f66b					      endif
   2201  f66b		       00 00		      .byte.b	%00000000, %00000000
   2202  f66d					      if	(pfwidth>2)
   2203  f66d		       03 00		      .byte.b	%00000011, %00000000
   2204  f66f					      endif
   2205  f66f		       00 00		      .byte.b	%00000000, %00000000
   2206  f671					      if	(pfwidth>2)
   2207  f671		       00 00		      .byte.b	%00000000, %00000000
   2208  f673					      endif
   2209  f673		       00 00		      .byte.b	%00000000, %00000000
   2210  f675					      if	(pfwidth>2)
   2211  f675		       00 00		      .byte.b	%00000000, %00000000
   2212  f677					      endif
   2213  f677		       00 00		      .byte.b	%00000000, %00000000
   2214  f679					      if	(pfwidth>2)
   2215  f679		       00 00		      .byte.b	%00000000, %00000000
   2216  f67b					      endif
   2217  f67b		       ff ff		      .byte.b	%11111111, %11111111
   2218  f67d					      if	(pfwidth>2)
   2219  f67d		       ff ff		      .byte.b	%11111111, %11111111
   2220  f67f					      endif
   2221  f67f		       00 00		      .byte.b	%00000000, %00000000
   2222  f681					      if	(pfwidth>2)
   2223  f681		       00 00		      .byte.b	%00000000, %00000000
   2224  f683					      endif
   2225  f683				   pflabel5
   2226  f683		       bd 57 f6 	      lda	PF_data5,x
   2227  f686		       95 a4		      sta	playfield,x
   2228  f688		       ca		      dex
   2229  f689		       10 f8		      bpl	pflabel5
   2230  f68b				   .skip4OR
   2231  f68b				   .L039		;  if f  =  25  ||  f	=  50 then playfield:
   2232  f68b
   2233  f68b		       a5 d9		      LDA	f
   2234  f68d		       c9 19		      CMP	#25
   2235  f68f		       d0 03		      BNE	.skipL039
   2236  f691				   .condpart12
   2237  f691		       4c 9a f6 	      jmp	.condpart13
   2238  f694				   .skipL039
   2239  f694		       a5 d9		      LDA	f
   2240  f696		       c9 32		      CMP	#50
   2241  f698		       d0 39		      BNE	.skip5OR
   2242  f69a				   .condpart13
   2243  f69a				  -	      ifconst	pfres
   2244  f69a				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2245  f69a					      else
   2246  f69a		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2247  f69c					      endif
   2248  f69c		       4c cb f6 	      jmp	pflabel6
   2249  f69f				   PF_data6
   2250  f69f		       00 00		      .byte.b	%00000000, %00000000
   2251  f6a1					      if	(pfwidth>2)
   2252  f6a1		       00 00		      .byte.b	%00000000, %00000000
   2253  f6a3					      endif
   2254  f6a3		       ff ff		      .byte.b	%11111111, %11111111
   2255  f6a5					      if	(pfwidth>2)
   2256  f6a5		       ff ff		      .byte.b	%11111111, %11111111
   2257  f6a7					      endif
   2258  f6a7		       00 00		      .byte.b	%00000000, %00000000
   2259  f6a9					      if	(pfwidth>2)
   2260  f6a9		       00 00		      .byte.b	%00000000, %00000000
   2261  f6ab					      endif
   2262  f6ab		       00 00		      .byte.b	%00000000, %00000000
   2263  f6ad					      if	(pfwidth>2)
   2264  f6ad		       00 00		      .byte.b	%00000000, %00000000
   2265  f6af					      endif
   2266  f6af		       00 00		      .byte.b	%00000000, %00000000
   2267  f6b1					      if	(pfwidth>2)
   2268  f6b1		       00 00		      .byte.b	%00000000, %00000000
   2269  f6b3					      endif
   2270  f6b3		       00 00		      .byte.b	%00000000, %00000000
   2271  f6b5					      if	(pfwidth>2)
   2272  f6b5		       0c 00		      .byte.b	%00001100, %00000000
   2273  f6b7					      endif
   2274  f6b7		       00 00		      .byte.b	%00000000, %00000000
   2275  f6b9					      if	(pfwidth>2)
   2276  f6b9		       00 00		      .byte.b	%00000000, %00000000
   2277  f6bb					      endif
   2278  f6bb		       00 00		      .byte.b	%00000000, %00000000
   2279  f6bd					      if	(pfwidth>2)
   2280  f6bd		       00 00		      .byte.b	%00000000, %00000000
   2281  f6bf					      endif
   2282  f6bf		       00 00		      .byte.b	%00000000, %00000000
   2283  f6c1					      if	(pfwidth>2)
   2284  f6c1		       00 00		      .byte.b	%00000000, %00000000
   2285  f6c3					      endif
   2286  f6c3		       ff ff		      .byte.b	%11111111, %11111111
   2287  f6c5					      if	(pfwidth>2)
   2288  f6c5		       ff ff		      .byte.b	%11111111, %11111111
   2289  f6c7					      endif
   2290  f6c7		       00 00		      .byte.b	%00000000, %00000000
   2291  f6c9					      if	(pfwidth>2)
   2292  f6c9		       00 00		      .byte.b	%00000000, %00000000
   2293  f6cb					      endif
   2294  f6cb				   pflabel6
   2295  f6cb		       bd 9f f6 	      lda	PF_data6,x
   2296  f6ce		       95 a4		      sta	playfield,x
   2297  f6d0		       ca		      dex
   2298  f6d1		       10 f8		      bpl	pflabel6
   2299  f6d3				   .skip5OR
   2300  f6d3				   .L040		;  if f  =  26  ||  f	=  51 then playfield:
   2301  f6d3
   2302  f6d3		       a5 d9		      LDA	f
   2303  f6d5		       c9 1a		      CMP	#26
   2304  f6d7		       d0 03		      BNE	.skipL040
   2305  f6d9				   .condpart14
   2306  f6d9		       4c e2 f6 	      jmp	.condpart15
   2307  f6dc				   .skipL040
   2308  f6dc		       a5 d9		      LDA	f
   2309  f6de		       c9 33		      CMP	#51
   2310  f6e0		       d0 39		      BNE	.skip6OR
   2311  f6e2				   .condpart15
   2312  f6e2				  -	      ifconst	pfres
   2313  f6e2				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2314  f6e2					      else
   2315  f6e2		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2316  f6e4					      endif
   2317  f6e4		       4c 13 f7 	      jmp	pflabel7
   2318  f6e7				   PF_data7
   2319  f6e7		       00 00		      .byte.b	%00000000, %00000000
   2320  f6e9					      if	(pfwidth>2)
   2321  f6e9		       00 00		      .byte.b	%00000000, %00000000
   2322  f6eb					      endif
   2323  f6eb		       ff ff		      .byte.b	%11111111, %11111111
   2324  f6ed					      if	(pfwidth>2)
   2325  f6ed		       ff ff		      .byte.b	%11111111, %11111111
   2326  f6ef					      endif
   2327  f6ef		       00 00		      .byte.b	%00000000, %00000000
   2328  f6f1					      if	(pfwidth>2)
   2329  f6f1		       00 00		      .byte.b	%00000000, %00000000
   2330  f6f3					      endif
   2331  f6f3		       00 00		      .byte.b	%00000000, %00000000
   2332  f6f5					      if	(pfwidth>2)
   2333  f6f5		       00 00		      .byte.b	%00000000, %00000000
   2334  f6f7					      endif
   2335  f6f7		       00 00		      .byte.b	%00000000, %00000000
   2336  f6f9					      if	(pfwidth>2)
   2337  f6f9		       00 00		      .byte.b	%00000000, %00000000
   2338  f6fb					      endif
   2339  f6fb		       00 00		      .byte.b	%00000000, %00000000
   2340  f6fd					      if	(pfwidth>2)
   2341  f6fd		       30 00		      .byte.b	%00110000, %00000000
   2342  f6ff					      endif
   2343  f6ff		       00 00		      .byte.b	%00000000, %00000000
   2344  f701					      if	(pfwidth>2)
   2345  f701		       00 00		      .byte.b	%00000000, %00000000
   2346  f703					      endif
   2347  f703		       00 00		      .byte.b	%00000000, %00000000
   2348  f705					      if	(pfwidth>2)
   2349  f705		       00 00		      .byte.b	%00000000, %00000000
   2350  f707					      endif
   2351  f707		       00 00		      .byte.b	%00000000, %00000000
   2352  f709					      if	(pfwidth>2)
   2353  f709		       00 00		      .byte.b	%00000000, %00000000
   2354  f70b					      endif
   2355  f70b		       ff ff		      .byte.b	%11111111, %11111111
   2356  f70d					      if	(pfwidth>2)
   2357  f70d		       ff ff		      .byte.b	%11111111, %11111111
   2358  f70f					      endif
   2359  f70f		       00 00		      .byte.b	%00000000, %00000000
   2360  f711					      if	(pfwidth>2)
   2361  f711		       00 00		      .byte.b	%00000000, %00000000
   2362  f713					      endif
   2363  f713				   pflabel7
   2364  f713		       bd e7 f6 	      lda	PF_data7,x
   2365  f716		       95 a4		      sta	playfield,x
   2366  f718		       ca		      dex
   2367  f719		       10 f8		      bpl	pflabel7
   2368  f71b				   .skip6OR
   2369  f71b				   .L041		;  if f  =  27  ||  f	=  52 then playfield:
   2370  f71b
   2371  f71b		       a5 d9		      LDA	f
   2372  f71d		       c9 1b		      CMP	#27
   2373  f71f		       d0 03		      BNE	.skipL041
   2374  f721				   .condpart16
   2375  f721		       4c 2a f7 	      jmp	.condpart17
   2376  f724				   .skipL041
   2377  f724		       a5 d9		      LDA	f
   2378  f726		       c9 34		      CMP	#52
   2379  f728		       d0 39		      BNE	.skip7OR
   2380  f72a				   .condpart17
   2381  f72a				  -	      ifconst	pfres
   2382  f72a				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2383  f72a					      else
   2384  f72a		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2385  f72c					      endif
   2386  f72c		       4c 5b f7 	      jmp	pflabel8
   2387  f72f				   PF_data8
   2388  f72f		       00 00		      .byte.b	%00000000, %00000000
   2389  f731					      if	(pfwidth>2)
   2390  f731		       00 00		      .byte.b	%00000000, %00000000
   2391  f733					      endif
   2392  f733		       ff ff		      .byte.b	%11111111, %11111111
   2393  f735					      if	(pfwidth>2)
   2394  f735		       ff ff		      .byte.b	%11111111, %11111111
   2395  f737					      endif
   2396  f737		       00 00		      .byte.b	%00000000, %00000000
   2397  f739					      if	(pfwidth>2)
   2398  f739		       00 00		      .byte.b	%00000000, %00000000
   2399  f73b					      endif
   2400  f73b		       00 00		      .byte.b	%00000000, %00000000
   2401  f73d					      if	(pfwidth>2)
   2402  f73d		       00 00		      .byte.b	%00000000, %00000000
   2403  f73f					      endif
   2404  f73f		       00 00		      .byte.b	%00000000, %00000000
   2405  f741					      if	(pfwidth>2)
   2406  f741		       00 00		      .byte.b	%00000000, %00000000
   2407  f743					      endif
   2408  f743		       00 00		      .byte.b	%00000000, %00000000
   2409  f745					      if	(pfwidth>2)
   2410  f745		       c0 00		      .byte.b	%11000000, %00000000
   2411  f747					      endif
   2412  f747		       00 00		      .byte.b	%00000000, %00000000
   2413  f749					      if	(pfwidth>2)
   2414  f749		       00 00		      .byte.b	%00000000, %00000000
   2415  f74b					      endif
   2416  f74b		       00 00		      .byte.b	%00000000, %00000000
   2417  f74d					      if	(pfwidth>2)
   2418  f74d		       00 00		      .byte.b	%00000000, %00000000
   2419  f74f					      endif
   2420  f74f		       00 00		      .byte.b	%00000000, %00000000
   2421  f751					      if	(pfwidth>2)
   2422  f751		       00 00		      .byte.b	%00000000, %00000000
   2423  f753					      endif
   2424  f753		       ff ff		      .byte.b	%11111111, %11111111
   2425  f755					      if	(pfwidth>2)
   2426  f755		       ff ff		      .byte.b	%11111111, %11111111
   2427  f757					      endif
   2428  f757		       00 00		      .byte.b	%00000000, %00000000
   2429  f759					      if	(pfwidth>2)
   2430  f759		       00 00		      .byte.b	%00000000, %00000000
   2431  f75b					      endif
   2432  f75b				   pflabel8
   2433  f75b		       bd 2f f7 	      lda	PF_data8,x
   2434  f75e		       95 a4		      sta	playfield,x
   2435  f760		       ca		      dex
   2436  f761		       10 f8		      bpl	pflabel8
   2437  f763				   .skip7OR
   2438  f763				   .L042		;  if f  =  28  ||  f	=  53 then playfield:
   2439  f763
   2440  f763		       a5 d9		      LDA	f
   2441  f765		       c9 1c		      CMP	#28
   2442  f767		       d0 03		      BNE	.skipL042
   2443  f769				   .condpart18
   2444  f769		       4c 72 f7 	      jmp	.condpart19
   2445  f76c				   .skipL042
   2446  f76c		       a5 d9		      LDA	f
   2447  f76e		       c9 35		      CMP	#53
   2448  f770		       d0 39		      BNE	.skip8OR
   2449  f772				   .condpart19
   2450  f772				  -	      ifconst	pfres
   2451  f772				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2452  f772					      else
   2453  f772		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2454  f774					      endif
   2455  f774		       4c a3 f7 	      jmp	pflabel9
   2456  f777				   PF_data9
   2457  f777		       00 00		      .byte.b	%00000000, %00000000
   2458  f779					      if	(pfwidth>2)
   2459  f779		       00 00		      .byte.b	%00000000, %00000000
   2460  f77b					      endif
   2461  f77b		       ff ff		      .byte.b	%11111111, %11111111
   2462  f77d					      if	(pfwidth>2)
   2463  f77d		       ff ff		      .byte.b	%11111111, %11111111
   2464  f77f					      endif
   2465  f77f		       00 00		      .byte.b	%00000000, %00000000
   2466  f781					      if	(pfwidth>2)
   2467  f781		       00 00		      .byte.b	%00000000, %00000000
   2468  f783					      endif
   2469  f783		       00 00		      .byte.b	%00000000, %00000000
   2470  f785					      if	(pfwidth>2)
   2471  f785		       00 00		      .byte.b	%00000000, %00000000
   2472  f787					      endif
   2473  f787		       00 00		      .byte.b	%00000000, %00000000
   2474  f789					      if	(pfwidth>2)
   2475  f789		       00 00		      .byte.b	%00000000, %00000000
   2476  f78b					      endif
   2477  f78b		       00 c0		      .byte.b	%00000000, %11000000
   2478  f78d					      if	(pfwidth>2)
   2479  f78d		       00 00		      .byte.b	%00000000, %00000000
   2480  f78f					      endif
   2481  f78f		       00 00		      .byte.b	%00000000, %00000000
   2482  f791					      if	(pfwidth>2)
   2483  f791		       00 00		      .byte.b	%00000000, %00000000
   2484  f793					      endif
   2485  f793		       00 00		      .byte.b	%00000000, %00000000
   2486  f795					      if	(pfwidth>2)
   2487  f795		       00 00		      .byte.b	%00000000, %00000000
   2488  f797					      endif
   2489  f797		       00 00		      .byte.b	%00000000, %00000000
   2490  f799					      if	(pfwidth>2)
   2491  f799		       00 00		      .byte.b	%00000000, %00000000
   2492  f79b					      endif
   2493  f79b		       ff ff		      .byte.b	%11111111, %11111111
   2494  f79d					      if	(pfwidth>2)
   2495  f79d		       ff ff		      .byte.b	%11111111, %11111111
   2496  f79f					      endif
   2497  f79f		       00 00		      .byte.b	%00000000, %00000000
   2498  f7a1					      if	(pfwidth>2)
   2499  f7a1		       00 00		      .byte.b	%00000000, %00000000
   2500  f7a3					      endif
   2501  f7a3				   pflabel9
   2502  f7a3		       bd 77 f7 	      lda	PF_data9,x
   2503  f7a6		       95 a4		      sta	playfield,x
   2504  f7a8		       ca		      dex
   2505  f7a9		       10 f8		      bpl	pflabel9
   2506  f7ab				   .skip8OR
   2507  f7ab				   .L043		;  if f  =  29  ||  f	=  54 then playfield:
   2508  f7ab
   2509  f7ab		       a5 d9		      LDA	f
   2510  f7ad		       c9 1d		      CMP	#29
   2511  f7af		       d0 03		      BNE	.skipL043
   2512  f7b1				   .condpart20
   2513  f7b1		       4c ba f7 	      jmp	.condpart21
   2514  f7b4				   .skipL043
   2515  f7b4		       a5 d9		      LDA	f
   2516  f7b6		       c9 36		      CMP	#54
   2517  f7b8		       d0 39		      BNE	.skip9OR
   2518  f7ba				   .condpart21
   2519  f7ba				  -	      ifconst	pfres
   2520  f7ba				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2521  f7ba					      else
   2522  f7ba		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2523  f7bc					      endif
   2524  f7bc		       4c eb f7 	      jmp	pflabel10
   2525  f7bf				   PF_data10
   2526  f7bf		       00 00		      .byte.b	%00000000, %00000000
   2527  f7c1					      if	(pfwidth>2)
   2528  f7c1		       00 00		      .byte.b	%00000000, %00000000
   2529  f7c3					      endif
   2530  f7c3		       ff ff		      .byte.b	%11111111, %11111111
   2531  f7c5					      if	(pfwidth>2)
   2532  f7c5		       ff ff		      .byte.b	%11111111, %11111111
   2533  f7c7					      endif
   2534  f7c7		       00 00		      .byte.b	%00000000, %00000000
   2535  f7c9					      if	(pfwidth>2)
   2536  f7c9		       00 00		      .byte.b	%00000000, %00000000
   2537  f7cb					      endif
   2538  f7cb		       00 00		      .byte.b	%00000000, %00000000
   2539  f7cd					      if	(pfwidth>2)
   2540  f7cd		       00 00		      .byte.b	%00000000, %00000000
   2541  f7cf					      endif
   2542  f7cf		       00 00		      .byte.b	%00000000, %00000000
   2543  f7d1					      if	(pfwidth>2)
   2544  f7d1		       00 00		      .byte.b	%00000000, %00000000
   2545  f7d3					      endif
   2546  f7d3		       00 30		      .byte.b	%00000000, %00110000
   2547  f7d5					      if	(pfwidth>2)
   2548  f7d5		       00 00		      .byte.b	%00000000, %00000000
   2549  f7d7					      endif
   2550  f7d7		       00 00		      .byte.b	%00000000, %00000000
   2551  f7d9					      if	(pfwidth>2)
   2552  f7d9		       00 00		      .byte.b	%00000000, %00000000
   2553  f7db					      endif
   2554  f7db		       00 00		      .byte.b	%00000000, %00000000
   2555  f7dd					      if	(pfwidth>2)
   2556  f7dd		       00 00		      .byte.b	%00000000, %00000000
   2557  f7df					      endif
   2558  f7df		       00 00		      .byte.b	%00000000, %00000000
   2559  f7e1					      if	(pfwidth>2)
   2560  f7e1		       00 00		      .byte.b	%00000000, %00000000
   2561  f7e3					      endif
   2562  f7e3		       ff ff		      .byte.b	%11111111, %11111111
   2563  f7e5					      if	(pfwidth>2)
   2564  f7e5		       ff ff		      .byte.b	%11111111, %11111111
   2565  f7e7					      endif
   2566  f7e7		       00 00		      .byte.b	%00000000, %00000000
   2567  f7e9					      if	(pfwidth>2)
   2568  f7e9		       00 00		      .byte.b	%00000000, %00000000
   2569  f7eb					      endif
   2570  f7eb				   pflabel10
   2571  f7eb		       bd bf f7 	      lda	PF_data10,x
   2572  f7ee		       95 a4		      sta	playfield,x
   2573  f7f0		       ca		      dex
   2574  f7f1		       10 f8		      bpl	pflabel10
   2575  f7f3				   .skip9OR
   2576  f7f3				   .L044		;  if f  =  30  ||  f	=  55 then playfield:
   2577  f7f3
   2578  f7f3		       a5 d9		      LDA	f
   2579  f7f5		       c9 1e		      CMP	#30
   2580  f7f7		       d0 03		      BNE	.skipL044
   2581  f7f9				   .condpart22
   2582  f7f9		       4c 02 f8 	      jmp	.condpart23
   2583  f7fc				   .skipL044
   2584  f7fc		       a5 d9		      LDA	f
   2585  f7fe		       c9 37		      CMP	#55
   2586  f800		       d0 39		      BNE	.skip10OR
   2587  f802				   .condpart23
   2588  f802				  -	      ifconst	pfres
   2589  f802				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2590  f802					      else
   2591  f802		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2592  f804					      endif
   2593  f804		       4c 33 f8 	      jmp	pflabel11
   2594  f807				   PF_data11
   2595  f807		       00 00		      .byte.b	%00000000, %00000000
   2596  f809					      if	(pfwidth>2)
   2597  f809		       00 00		      .byte.b	%00000000, %00000000
   2598  f80b					      endif
   2599  f80b		       ff ff		      .byte.b	%11111111, %11111111
   2600  f80d					      if	(pfwidth>2)
   2601  f80d		       ff ff		      .byte.b	%11111111, %11111111
   2602  f80f					      endif
   2603  f80f		       00 00		      .byte.b	%00000000, %00000000
   2604  f811					      if	(pfwidth>2)
   2605  f811		       00 00		      .byte.b	%00000000, %00000000
   2606  f813					      endif
   2607  f813		       00 00		      .byte.b	%00000000, %00000000
   2608  f815					      if	(pfwidth>2)
   2609  f815		       00 00		      .byte.b	%00000000, %00000000
   2610  f817					      endif
   2611  f817		       00 00		      .byte.b	%00000000, %00000000
   2612  f819					      if	(pfwidth>2)
   2613  f819		       00 00		      .byte.b	%00000000, %00000000
   2614  f81b					      endif
   2615  f81b		       00 0c		      .byte.b	%00000000, %00001100
   2616  f81d					      if	(pfwidth>2)
   2617  f81d		       00 00		      .byte.b	%00000000, %00000000
   2618  f81f					      endif
   2619  f81f		       00 00		      .byte.b	%00000000, %00000000
   2620  f821					      if	(pfwidth>2)
   2621  f821		       00 00		      .byte.b	%00000000, %00000000
   2622  f823					      endif
   2623  f823		       00 00		      .byte.b	%00000000, %00000000
   2624  f825					      if	(pfwidth>2)
   2625  f825		       00 00		      .byte.b	%00000000, %00000000
   2626  f827					      endif
   2627  f827		       00 00		      .byte.b	%00000000, %00000000
   2628  f829					      if	(pfwidth>2)
   2629  f829		       00 00		      .byte.b	%00000000, %00000000
   2630  f82b					      endif
   2631  f82b		       ff ff		      .byte.b	%11111111, %11111111
   2632  f82d					      if	(pfwidth>2)
   2633  f82d		       ff ff		      .byte.b	%11111111, %11111111
   2634  f82f					      endif
   2635  f82f		       00 00		      .byte.b	%00000000, %00000000
   2636  f831					      if	(pfwidth>2)
   2637  f831		       00 00		      .byte.b	%00000000, %00000000
   2638  f833					      endif
   2639  f833				   pflabel11
   2640  f833		       bd 07 f8 	      lda	PF_data11,x
   2641  f836		       95 a4		      sta	playfield,x
   2642  f838		       ca		      dex
   2643  f839		       10 f8		      bpl	pflabel11
   2644  f83b				   .skip10OR
   2645  f83b				   .L045		;  if f  =  31  ||  f	=  56 then playfield:
   2646  f83b
   2647  f83b		       a5 d9		      LDA	f
   2648  f83d		       c9 1f		      CMP	#31
   2649  f83f		       d0 03		      BNE	.skipL045
   2650  f841				   .condpart24
   2651  f841		       4c 4a f8 	      jmp	.condpart25
   2652  f844				   .skipL045
   2653  f844		       a5 d9		      LDA	f
   2654  f846		       c9 38		      CMP	#56
   2655  f848		       d0 39		      BNE	.skip11OR
   2656  f84a				   .condpart25
   2657  f84a				  -	      ifconst	pfres
   2658  f84a				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2659  f84a					      else
   2660  f84a		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2661  f84c					      endif
   2662  f84c		       4c 7b f8 	      jmp	pflabel12
   2663  f84f				   PF_data12
   2664  f84f		       00 00		      .byte.b	%00000000, %00000000
   2665  f851					      if	(pfwidth>2)
   2666  f851		       00 00		      .byte.b	%00000000, %00000000
   2667  f853					      endif
   2668  f853		       ff ff		      .byte.b	%11111111, %11111111
   2669  f855					      if	(pfwidth>2)
   2670  f855		       ff ff		      .byte.b	%11111111, %11111111
   2671  f857					      endif
   2672  f857		       00 00		      .byte.b	%00000000, %00000000
   2673  f859					      if	(pfwidth>2)
   2674  f859		       00 00		      .byte.b	%00000000, %00000000
   2675  f85b					      endif
   2676  f85b		       00 00		      .byte.b	%00000000, %00000000
   2677  f85d					      if	(pfwidth>2)
   2678  f85d		       00 00		      .byte.b	%00000000, %00000000
   2679  f85f					      endif
   2680  f85f		       00 00		      .byte.b	%00000000, %00000000
   2681  f861					      if	(pfwidth>2)
   2682  f861		       00 00		      .byte.b	%00000000, %00000000
   2683  f863					      endif
   2684  f863		       00 03		      .byte.b	%00000000, %00000011
   2685  f865					      if	(pfwidth>2)
   2686  f865		       00 00		      .byte.b	%00000000, %00000000
   2687  f867					      endif
   2688  f867		       00 00		      .byte.b	%00000000, %00000000
   2689  f869					      if	(pfwidth>2)
   2690  f869		       00 00		      .byte.b	%00000000, %00000000
   2691  f86b					      endif
   2692  f86b		       00 00		      .byte.b	%00000000, %00000000
   2693  f86d					      if	(pfwidth>2)
   2694  f86d		       00 00		      .byte.b	%00000000, %00000000
   2695  f86f					      endif
   2696  f86f		       00 00		      .byte.b	%00000000, %00000000
   2697  f871					      if	(pfwidth>2)
   2698  f871		       00 00		      .byte.b	%00000000, %00000000
   2699  f873					      endif
   2700  f873		       ff ff		      .byte.b	%11111111, %11111111
   2701  f875					      if	(pfwidth>2)
   2702  f875		       ff ff		      .byte.b	%11111111, %11111111
   2703  f877					      endif
   2704  f877		       00 00		      .byte.b	%00000000, %00000000
   2705  f879					      if	(pfwidth>2)
   2706  f879		       00 00		      .byte.b	%00000000, %00000000
   2707  f87b					      endif
   2708  f87b				   pflabel12
   2709  f87b		       bd 4f f8 	      lda	PF_data12,x
   2710  f87e		       95 a4		      sta	playfield,x
   2711  f880		       ca		      dex
   2712  f881		       10 f8		      bpl	pflabel12
   2713  f883				   .skip11OR
   2714  f883				   .
   2715  f883							;
   2716  f883
   2717  f883				   .L046		;  if f  =  32  ||  f	=  57 then playfield:
   2718  f883
   2719  f883		       a5 d9		      LDA	f
   2720  f885		       c9 20		      CMP	#32
   2721  f887		       d0 03		      BNE	.skipL046
   2722  f889				   .condpart26
   2723  f889		       4c 92 f8 	      jmp	.condpart27
   2724  f88c				   .skipL046
   2725  f88c		       a5 d9		      LDA	f
   2726  f88e		       c9 39		      CMP	#57
   2727  f890		       d0 39		      BNE	.skip12OR
   2728  f892				   .condpart27
   2729  f892				  -	      ifconst	pfres
   2730  f892				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2731  f892					      else
   2732  f892		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2733  f894					      endif
   2734  f894		       4c c3 f8 	      jmp	pflabel13
   2735  f897				   PF_data13
   2736  f897		       00 00		      .byte.b	%00000000, %00000000
   2737  f899					      if	(pfwidth>2)
   2738  f899		       00 00		      .byte.b	%00000000, %00000000
   2739  f89b					      endif
   2740  f89b		       ff ff		      .byte.b	%11111111, %11111111
   2741  f89d					      if	(pfwidth>2)
   2742  f89d		       ff ff		      .byte.b	%11111111, %11111111
   2743  f89f					      endif
   2744  f89f		       00 00		      .byte.b	%00000000, %00000000
   2745  f8a1					      if	(pfwidth>2)
   2746  f8a1		       00 00		      .byte.b	%00000000, %00000000
   2747  f8a3					      endif
   2748  f8a3		       00 00		      .byte.b	%00000000, %00000000
   2749  f8a5					      if	(pfwidth>2)
   2750  f8a5		       00 00		      .byte.b	%00000000, %00000000
   2751  f8a7					      endif
   2752  f8a7		       00 00		      .byte.b	%00000000, %00000000
   2753  f8a9					      if	(pfwidth>2)
   2754  f8a9		       00 00		      .byte.b	%00000000, %00000000
   2755  f8ab					      endif
   2756  f8ab		       03 00		      .byte.b	%00000011, %00000000
   2757  f8ad					      if	(pfwidth>2)
   2758  f8ad		       00 00		      .byte.b	%00000000, %00000000
   2759  f8af					      endif
   2760  f8af		       00 00		      .byte.b	%00000000, %00000000
   2761  f8b1					      if	(pfwidth>2)
   2762  f8b1		       00 00		      .byte.b	%00000000, %00000000
   2763  f8b3					      endif
   2764  f8b3		       00 00		      .byte.b	%00000000, %00000000
   2765  f8b5					      if	(pfwidth>2)
   2766  f8b5		       00 00		      .byte.b	%00000000, %00000000
   2767  f8b7					      endif
   2768  f8b7		       00 00		      .byte.b	%00000000, %00000000
   2769  f8b9					      if	(pfwidth>2)
   2770  f8b9		       00 00		      .byte.b	%00000000, %00000000
   2771  f8bb					      endif
   2772  f8bb		       ff ff		      .byte.b	%11111111, %11111111
   2773  f8bd					      if	(pfwidth>2)
   2774  f8bd		       ff ff		      .byte.b	%11111111, %11111111
   2775  f8bf					      endif
   2776  f8bf		       00 00		      .byte.b	%00000000, %00000000
   2777  f8c1					      if	(pfwidth>2)
   2778  f8c1		       00 00		      .byte.b	%00000000, %00000000
   2779  f8c3					      endif
   2780  f8c3				   pflabel13
   2781  f8c3		       bd 97 f8 	      lda	PF_data13,x
   2782  f8c6		       95 a4		      sta	playfield,x
   2783  f8c8		       ca		      dex
   2784  f8c9		       10 f8		      bpl	pflabel13
   2785  f8cb				   .skip12OR
   2786  f8cb				   .L047		;  if f  =  33  ||  f	=  58 then playfield:
   2787  f8cb
   2788  f8cb		       a5 d9		      LDA	f
   2789  f8cd		       c9 21		      CMP	#33
   2790  f8cf		       d0 03		      BNE	.skipL047
   2791  f8d1				   .condpart28
   2792  f8d1		       4c da f8 	      jmp	.condpart29
   2793  f8d4				   .skipL047
   2794  f8d4		       a5 d9		      LDA	f
   2795  f8d6		       c9 3a		      CMP	#58
   2796  f8d8		       d0 39		      BNE	.skip13OR
   2797  f8da				   .condpart29
   2798  f8da				  -	      ifconst	pfres
   2799  f8da				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2800  f8da					      else
   2801  f8da		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2802  f8dc					      endif
   2803  f8dc		       4c 0b f9 	      jmp	pflabel14
   2804  f8df				   PF_data14
   2805  f8df		       00 00		      .byte.b	%00000000, %00000000
   2806  f8e1					      if	(pfwidth>2)
   2807  f8e1		       00 00		      .byte.b	%00000000, %00000000
   2808  f8e3					      endif
   2809  f8e3		       ff ff		      .byte.b	%11111111, %11111111
   2810  f8e5					      if	(pfwidth>2)
   2811  f8e5		       ff ff		      .byte.b	%11111111, %11111111
   2812  f8e7					      endif
   2813  f8e7		       00 00		      .byte.b	%00000000, %00000000
   2814  f8e9					      if	(pfwidth>2)
   2815  f8e9		       00 00		      .byte.b	%00000000, %00000000
   2816  f8eb					      endif
   2817  f8eb		       00 00		      .byte.b	%00000000, %00000000
   2818  f8ed					      if	(pfwidth>2)
   2819  f8ed		       00 00		      .byte.b	%00000000, %00000000
   2820  f8ef					      endif
   2821  f8ef		       00 00		      .byte.b	%00000000, %00000000
   2822  f8f1					      if	(pfwidth>2)
   2823  f8f1		       00 00		      .byte.b	%00000000, %00000000
   2824  f8f3					      endif
   2825  f8f3		       0c 00		      .byte.b	%00001100, %00000000
   2826  f8f5					      if	(pfwidth>2)
   2827  f8f5		       00 00		      .byte.b	%00000000, %00000000
   2828  f8f7					      endif
   2829  f8f7		       00 00		      .byte.b	%00000000, %00000000
   2830  f8f9					      if	(pfwidth>2)
   2831  f8f9		       00 00		      .byte.b	%00000000, %00000000
   2832  f8fb					      endif
   2833  f8fb		       00 00		      .byte.b	%00000000, %00000000
   2834  f8fd					      if	(pfwidth>2)
   2835  f8fd		       00 00		      .byte.b	%00000000, %00000000
   2836  f8ff					      endif
   2837  f8ff		       00 00		      .byte.b	%00000000, %00000000
   2838  f901					      if	(pfwidth>2)
   2839  f901		       00 00		      .byte.b	%00000000, %00000000
   2840  f903					      endif
   2841  f903		       ff ff		      .byte.b	%11111111, %11111111
   2842  f905					      if	(pfwidth>2)
   2843  f905		       ff ff		      .byte.b	%11111111, %11111111
   2844  f907					      endif
   2845  f907		       00 00		      .byte.b	%00000000, %00000000
   2846  f909					      if	(pfwidth>2)
   2847  f909		       00 00		      .byte.b	%00000000, %00000000
   2848  f90b					      endif
   2849  f90b				   pflabel14
   2850  f90b		       bd df f8 	      lda	PF_data14,x
   2851  f90e		       95 a4		      sta	playfield,x
   2852  f910		       ca		      dex
   2853  f911		       10 f8		      bpl	pflabel14
   2854  f913				   .skip13OR
   2855  f913				   .
   2856  f913							;
   2857  f913
   2858  f913				   .L048		;  if f  =  34  ||  f	=  59 then playfield:
   2859  f913
   2860  f913		       a5 d9		      LDA	f
   2861  f915		       c9 22		      CMP	#34
   2862  f917		       d0 03		      BNE	.skipL048
   2863  f919				   .condpart30
   2864  f919		       4c 22 f9 	      jmp	.condpart31
   2865  f91c				   .skipL048
   2866  f91c		       a5 d9		      LDA	f
   2867  f91e		       c9 3b		      CMP	#59
   2868  f920		       d0 39		      BNE	.skip14OR
   2869  f922				   .condpart31
   2870  f922				  -	      ifconst	pfres
   2871  f922				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2872  f922					      else
   2873  f922		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2874  f924					      endif
   2875  f924		       4c 53 f9 	      jmp	pflabel15
   2876  f927				   PF_data15
   2877  f927		       00 00		      .byte.b	%00000000, %00000000
   2878  f929					      if	(pfwidth>2)
   2879  f929		       00 00		      .byte.b	%00000000, %00000000
   2880  f92b					      endif
   2881  f92b		       ff ff		      .byte.b	%11111111, %11111111
   2882  f92d					      if	(pfwidth>2)
   2883  f92d		       ff ff		      .byte.b	%11111111, %11111111
   2884  f92f					      endif
   2885  f92f		       00 00		      .byte.b	%00000000, %00000000
   2886  f931					      if	(pfwidth>2)
   2887  f931		       00 00		      .byte.b	%00000000, %00000000
   2888  f933					      endif
   2889  f933		       00 00		      .byte.b	%00000000, %00000000
   2890  f935					      if	(pfwidth>2)
   2891  f935		       00 00		      .byte.b	%00000000, %00000000
   2892  f937					      endif
   2893  f937		       00 00		      .byte.b	%00000000, %00000000
   2894  f939					      if	(pfwidth>2)
   2895  f939		       00 00		      .byte.b	%00000000, %00000000
   2896  f93b					      endif
   2897  f93b		       30 00		      .byte.b	%00110000, %00000000
   2898  f93d					      if	(pfwidth>2)
   2899  f93d		       00 00		      .byte.b	%00000000, %00000000
   2900  f93f					      endif
   2901  f93f		       00 00		      .byte.b	%00000000, %00000000
   2902  f941					      if	(pfwidth>2)
   2903  f941		       00 00		      .byte.b	%00000000, %00000000
   2904  f943					      endif
   2905  f943		       00 00		      .byte.b	%00000000, %00000000
   2906  f945					      if	(pfwidth>2)
   2907  f945		       00 00		      .byte.b	%00000000, %00000000
   2908  f947					      endif
   2909  f947		       00 00		      .byte.b	%00000000, %00000000
   2910  f949					      if	(pfwidth>2)
   2911  f949		       00 00		      .byte.b	%00000000, %00000000
   2912  f94b					      endif
   2913  f94b		       ff ff		      .byte.b	%11111111, %11111111
   2914  f94d					      if	(pfwidth>2)
   2915  f94d		       ff ff		      .byte.b	%11111111, %11111111
   2916  f94f					      endif
   2917  f94f		       00 00		      .byte.b	%00000000, %00000000
   2918  f951					      if	(pfwidth>2)
   2919  f951		       00 00		      .byte.b	%00000000, %00000000
   2920  f953					      endif
   2921  f953				   pflabel15
   2922  f953		       bd 27 f9 	      lda	PF_data15,x
   2923  f956		       95 a4		      sta	playfield,x
   2924  f958		       ca		      dex
   2925  f959		       10 f8		      bpl	pflabel15
   2926  f95b				   .skip14OR
   2927  f95b				   .L049		;  if f  =  35  ||  f	=  60 then playfield:
   2928  f95b
   2929  f95b		       a5 d9		      LDA	f
   2930  f95d		       c9 23		      CMP	#35
   2931  f95f		       d0 03		      BNE	.skipL049
   2932  f961				   .condpart32
   2933  f961		       4c 6a f9 	      jmp	.condpart33
   2934  f964				   .skipL049
   2935  f964		       a5 d9		      LDA	f
   2936  f966		       c9 3c		      CMP	#60
   2937  f968		       d0 39		      BNE	.skip15OR
   2938  f96a				   .condpart33
   2939  f96a				  -	      ifconst	pfres
   2940  f96a				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2941  f96a					      else
   2942  f96a		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2943  f96c					      endif
   2944  f96c		       4c 9b f9 	      jmp	pflabel16
   2945  f96f				   PF_data16
   2946  f96f		       00 00		      .byte.b	%00000000, %00000000
   2947  f971					      if	(pfwidth>2)
   2948  f971		       00 00		      .byte.b	%00000000, %00000000
   2949  f973					      endif
   2950  f973		       ff ff		      .byte.b	%11111111, %11111111
   2951  f975					      if	(pfwidth>2)
   2952  f975		       ff ff		      .byte.b	%11111111, %11111111
   2953  f977					      endif
   2954  f977		       00 00		      .byte.b	%00000000, %00000000
   2955  f979					      if	(pfwidth>2)
   2956  f979		       00 00		      .byte.b	%00000000, %00000000
   2957  f97b					      endif
   2958  f97b		       00 00		      .byte.b	%00000000, %00000000
   2959  f97d					      if	(pfwidth>2)
   2960  f97d		       00 00		      .byte.b	%00000000, %00000000
   2961  f97f					      endif
   2962  f97f		       00 00		      .byte.b	%00000000, %00000000
   2963  f981					      if	(pfwidth>2)
   2964  f981		       00 00		      .byte.b	%00000000, %00000000
   2965  f983					      endif
   2966  f983		       c0 00		      .byte.b	%11000000, %00000000
   2967  f985					      if	(pfwidth>2)
   2968  f985		       00 00		      .byte.b	%00000000, %00000000
   2969  f987					      endif
   2970  f987		       00 00		      .byte.b	%00000000, %00000000
   2971  f989					      if	(pfwidth>2)
   2972  f989		       00 00		      .byte.b	%00000000, %00000000
   2973  f98b					      endif
   2974  f98b		       00 00		      .byte.b	%00000000, %00000000
   2975  f98d					      if	(pfwidth>2)
   2976  f98d		       00 00		      .byte.b	%00000000, %00000000
   2977  f98f					      endif
   2978  f98f		       00 00		      .byte.b	%00000000, %00000000
   2979  f991					      if	(pfwidth>2)
   2980  f991		       00 00		      .byte.b	%00000000, %00000000
   2981  f993					      endif
   2982  f993		       ff ff		      .byte.b	%11111111, %11111111
   2983  f995					      if	(pfwidth>2)
   2984  f995		       ff ff		      .byte.b	%11111111, %11111111
   2985  f997					      endif
   2986  f997		       00 00		      .byte.b	%00000000, %00000000
   2987  f999					      if	(pfwidth>2)
   2988  f999		       00 00		      .byte.b	%00000000, %00000000
   2989  f99b					      endif
   2990  f99b				   pflabel16
   2991  f99b		       bd 6f f9 	      lda	PF_data16,x
   2992  f99e		       95 a4		      sta	playfield,x
   2993  f9a0		       ca		      dex
   2994  f9a1		       10 f8		      bpl	pflabel16
   2995  f9a3				   .skip15OR
   2996  f9a3				   .L050		;  if f  =  36  ||  f	=  61 then playfield:
   2997  f9a3
   2998  f9a3		       a5 d9		      LDA	f
   2999  f9a5		       c9 24		      CMP	#36
   3000  f9a7		       d0 03		      BNE	.skipL050
   3001  f9a9				   .condpart34
   3002  f9a9		       4c b2 f9 	      jmp	.condpart35
   3003  f9ac				   .skipL050
   3004  f9ac		       a5 d9		      LDA	f
   3005  f9ae		       c9 3d		      CMP	#61
   3006  f9b0		       d0 39		      BNE	.skip16OR
   3007  f9b2				   .condpart35
   3008  f9b2				  -	      ifconst	pfres
   3009  f9b2				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   3010  f9b2					      else
   3011  f9b2		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   3012  f9b4					      endif
   3013  f9b4		       4c e3 f9 	      jmp	pflabel17
   3014  f9b7				   PF_data17
   3015  f9b7		       00 00		      .byte.b	%00000000, %00000000
   3016  f9b9					      if	(pfwidth>2)
   3017  f9b9		       00 00		      .byte.b	%00000000, %00000000
   3018  f9bb					      endif
   3019  f9bb		       ff ff		      .byte.b	%11111111, %11111111
   3020  f9bd					      if	(pfwidth>2)
   3021  f9bd		       ff ff		      .byte.b	%11111111, %11111111
   3022  f9bf					      endif
   3023  f9bf		       00 00		      .byte.b	%00000000, %00000000
   3024  f9c1					      if	(pfwidth>2)
   3025  f9c1		       00 00		      .byte.b	%00000000, %00000000
   3026  f9c3					      endif
   3027  f9c3		       00 00		      .byte.b	%00000000, %00000000
   3028  f9c5					      if	(pfwidth>2)
   3029  f9c5		       00 00		      .byte.b	%00000000, %00000000
   3030  f9c7					      endif
   3031  f9c7		       00 00		      .byte.b	%00000000, %00000000
   3032  f9c9					      if	(pfwidth>2)
   3033  f9c9		       00 00		      .byte.b	%00000000, %00000000
   3034  f9cb					      endif
   3035  f9cb		       00 00		      .byte.b	%00000000, %00000000
   3036  f9cd					      if	(pfwidth>2)
   3037  f9cd		       00 00		      .byte.b	%00000000, %00000000
   3038  f9cf					      endif
   3039  f9cf		       00 00		      .byte.b	%00000000, %00000000
   3040  f9d1					      if	(pfwidth>2)
   3041  f9d1		       00 00		      .byte.b	%00000000, %00000000
   3042  f9d3					      endif
   3043  f9d3		       00 00		      .byte.b	%00000000, %00000000
   3044  f9d5					      if	(pfwidth>2)
   3045  f9d5		       00 00		      .byte.b	%00000000, %00000000
   3046  f9d7					      endif
   3047  f9d7		       00 00		      .byte.b	%00000000, %00000000
   3048  f9d9					      if	(pfwidth>2)
   3049  f9d9		       00 00		      .byte.b	%00000000, %00000000
   3050  f9db					      endif
   3051  f9db		       ff ff		      .byte.b	%11111111, %11111111
   3052  f9dd					      if	(pfwidth>2)
   3053  f9dd		       ff ff		      .byte.b	%11111111, %11111111
   3054  f9df					      endif
   3055  f9df		       00 00		      .byte.b	%00000000, %00000000
   3056  f9e1					      if	(pfwidth>2)
   3057  f9e1		       00 00		      .byte.b	%00000000, %00000000
   3058  f9e3					      endif
   3059  f9e3				   pflabel17
   3060  f9e3		       bd b7 f9 	      lda	PF_data17,x
   3061  f9e6		       95 a4		      sta	playfield,x
   3062  f9e8		       ca		      dex
   3063  f9e9		       10 f8		      bpl	pflabel17
   3064  f9eb				   .skip16OR
   3065  f9eb				   .
   3066  f9eb							;
   3067  f9eb
   3068  f9eb				   .L051		;  if f  =  61 then f	=  12
   3069  f9eb
   3070  f9eb		       a5 d9		      LDA	f
   3071  f9ed		       c9 3d		      CMP	#61
   3072  f9ef		       d0 04		      BNE	.skipL051
   3073  f9f1				   .condpart36
   3074  f9f1		       a9 0c		      LDA	#12
   3075  f9f3		       85 d9		      STA	f
   3076  f9f5				   .skipL051
   3077  f9f5				   .L052		;  if g  =  50 then g	=  49
   3078  f9f5
   3079  f9f5		       a5 da		      LDA	g
   3080  f9f7		       c9 32		      CMP	#50
   3081  f9f9		       d0 04		      BNE	.skipL052
   3082  f9fb				   .condpart37
   3083  f9fb		       a9 31		      LDA	#49
   3084  f9fd		       85 da		      STA	g
   3085  f9ff				   .skipL052
   3086  f9ff				   .
   3087  f9ff							;
   3088  f9ff
   3089  f9ff				   .L053		;  rem spawn ball at random location based on f
   3090  f9ff
   3091  f9ff				   .L054		;  if g  =  48 then ballx  =  150 : bally  =  f  +  10
   3092  f9ff
   3093  f9ff		       a5 da		      LDA	g
   3094  fa01		       c9 30		      CMP	#48
   3095  fa03		       d0 0b		      BNE	.skipL054
   3096  fa05				   .condpart38
   3097  fa05		       a9 96		      LDA	#150
   3098  fa07		       85 84		      STA	ballx
   3099  fa09		       a5 d9		      LDA	f
   3100  fa0b		       18		      CLC
   3101  fa0c		       69 0a		      ADC	#10
   3102  fa0e		       85 89		      STA	bally
   3103  fa10				   .skipL054
   3104  fa10				   .
   3105  fa10							;
   3106  fa10
   3107  fa10				   .draw_loop
   3108  fa10							; draw_loop
   3109  fa10
   3110  fa10				   .L055		;  drawscreen
   3111  fa10
   3112  fa10		       20 bd f3 	      jsr	drawscreen
   3113  fa13				   .
   3114  fa13							;
   3115  fa13
   3116  fa13				   .L056		;  rem ball movement
   3117  fa13
   3118  fa13				   .L057		;  ballx  =  ballx  -	1
   3119  fa13
   3120  fa13		       c6 84		      DEC	ballx
   3121  fa15				   .L058		;  if g  >  48 then bally  =  bally  +  h
   3122  fa15
   3123  fa15		       a9 30		      LDA	#48
   3124  fa17		       c5 da		      CMP	g
   3125  fa19		       b0 07		      BCS	.skipL058
   3126  fa1b				   .condpart39
   3127  fa1b		       a5 89		      LDA	bally
   3128  fa1d		       18		      CLC
   3129  fa1e		       65 db		      ADC	h
   3130  fa20		       85 89		      STA	bally
   3131  fa22				   .skipL058
   3132  fa22				   .
   3133  fa22							;
   3134  fa22
   3135  fa22				   .L059		;  rem player movement
   3136  fa22
   3137  fa22				   .L060		;  if joy0up  &&  player0y  >	24 then player0y  =  player0y - 1
   3138  fa22
   3139  fa22		       a9 10		      lda	#$10
   3140  fa24		       2c 80 02 	      bit	SWCHA
   3141  fa27		       d0 08		      BNE	.skipL060
   3142  fa29				   .condpart40
   3143  fa29		       a9 18		      LDA	#24
   3144  fa2b		       c5 85		      CMP	player0y
   3145  fa2d		       b0 02		      BCS	.skip40then
   3146  fa2f				   .condpart41
   3147  fa2f		       c6 85		      DEC	player0y
   3148  fa31				   .skip40then
   3149  fa31				   .skipL060
   3150  fa31				   .L061		;  if joy0down  &&  player0y  <  72 then player0y  =  player0y + 1
   3151  fa31
   3152  fa31		       a9 20		      lda	#$20
   3153  fa33		       2c 80 02 	      bit	SWCHA
   3154  fa36		       d0 08		      BNE	.skipL061
   3155  fa38				   .condpart42
   3156  fa38		       a5 85		      LDA	player0y
   3157  fa3a		       c9 48		      CMP	#72
   3158  fa3c		       b0 02		      BCS	.skip42then
   3159  fa3e				   .condpart43
   3160  fa3e		       e6 85		      INC	player0y
   3161  fa40				   .skip42then
   3162  fa40				   .skipL061
   3163  fa40				   .L062		;  if joy0left  &&  player0x  >  16 then player0x  =  player0x - 1
   3164  fa40
   3165  fa40		       2c 80 02 	      bit	SWCHA
   3166  fa43		       70 08		      BVS	.skipL062
   3167  fa45				   .condpart44
   3168  fa45		       a9 10		      LDA	#16
   3169  fa47		       c5 80		      CMP	player0x
   3170  fa49		       b0 02		      BCS	.skip44then
   3171  fa4b				   .condpart45
   3172  fa4b		       c6 80		      DEC	player0x
   3173  fa4d				   .skip44then
   3174  fa4d				   .skipL062
   3175  fa4d				   .L063		;  if joy0right  &&  player0x	<  138 then player0x  =  player0x + 1
   3176  fa4d
   3177  fa4d		       2c 80 02 	      bit	SWCHA
   3178  fa50		       30 08		      BMI	.skipL063
   3179  fa52				   .condpart46
   3180  fa52		       a5 80		      LDA	player0x
   3181  fa54		       c9 8a		      CMP	#138
   3182  fa56		       b0 02		      BCS	.skip46then
   3183  fa58				   .condpart47
   3184  fa58		       e6 80		      INC	player0x
   3185  fa5a				   .skip46then
   3186  fa5a				   .skipL063
   3187  fa5a				   .
   3188  fa5a							;
   3189  fa5a
   3190  fa5a				   .L064		;  if joy1up  &&  player1y  >	28 then player1y  =  player1y - 1
   3191  fa5a
   3192  fa5a		       a9 01		      lda	#1
   3193  fa5c		       2c 80 02 	      bit	SWCHA
   3194  fa5f		       d0 08		      BNE	.skipL064
   3195  fa61				   .condpart48
   3196  fa61		       a9 1c		      LDA	#28
   3197  fa63		       c5 86		      CMP	player1y
   3198  fa65		       b0 02		      BCS	.skip48then
   3199  fa67				   .condpart49
   3200  fa67		       c6 86		      DEC	player1y
   3201  fa69				   .skip48then
   3202  fa69				   .skipL064
   3203  fa69				   .L065		;  if joy1down  &&  player1y  <  72 then player1y  =  player1y + 1
   3204  fa69
   3205  fa69		       a9 02		      lda	#2
   3206  fa6b		       2c 80 02 	      bit	SWCHA
   3207  fa6e		       d0 08		      BNE	.skipL065
   3208  fa70				   .condpart50
   3209  fa70		       a5 86		      LDA	player1y
   3210  fa72		       c9 48		      CMP	#72
   3211  fa74		       b0 02		      BCS	.skip50then
   3212  fa76				   .condpart51
   3213  fa76		       e6 86		      INC	player1y
   3214  fa78				   .skip50then
   3215  fa78				   .skipL065
   3216  fa78				   .L066		;  if joy1left  &&  player1x  >  16 then player1x  =  player1x - 1
   3217  fa78
   3218  fa78		       a9 04		      lda	#4
   3219  fa7a		       2c 80 02 	      bit	SWCHA
   3220  fa7d		       d0 08		      BNE	.skipL066
   3221  fa7f				   .condpart52
   3222  fa7f		       a9 10		      LDA	#16
   3223  fa81		       c5 81		      CMP	player1x
   3224  fa83		       b0 02		      BCS	.skip52then
   3225  fa85				   .condpart53
   3226  fa85		       c6 81		      DEC	player1x
   3227  fa87				   .skip52then
   3228  fa87				   .skipL066
   3229  fa87				   .L067		;  if joy1right  &&  player1x	<  138 then player1x  =  player1x + 1
   3230  fa87
   3231  fa87		       a9 08		      lda	#8
   3232  fa89		       2c 80 02 	      bit	SWCHA
   3233  fa8c		       d0 08		      BNE	.skipL067
   3234  fa8e				   .condpart54
   3235  fa8e		       a5 81		      LDA	player1x
   3236  fa90		       c9 8a		      CMP	#138
   3237  fa92		       b0 02		      BCS	.skip54then
   3238  fa94				   .condpart55
   3239  fa94		       e6 81		      INC	player1x
   3240  fa96				   .skip54then
   3241  fa96				   .skipL067
   3242  fa96				   .
   3243  fa96							;
   3244  fa96
   3245  fa96				   .L068		;  if bally  =  20 then h  =  1
   3246  fa96
   3247  fa96		       a5 89		      LDA	bally
   3248  fa98		       c9 14		      CMP	#20
   3249  fa9a		       d0 04		      BNE	.skipL068
   3250  fa9c				   .condpart56
   3251  fa9c		       a9 01		      LDA	#1
   3252  fa9e		       85 db		      STA	h
   3253  faa0				   .skipL068
   3254  faa0				   .L069		;  if bally  =  72 then h  =	- 1
   3255  faa0
   3256  faa0		       a5 89		      LDA	bally
   3257  faa2		       c9 48		      CMP	#72
   3258  faa4		       d0 04		      BNE	.skipL069
   3259  faa6				   .condpart57
   3260  faa6		       a9 ff		      LDA	#255
   3261  faa8		       85 db		      STA	h
   3262  faaa				   .skipL069
   3263  faaa				   .
   3264  faaa							;
   3265  faaa
   3266  faaa				   .L070		;  if ballx  =  10 then g  =  0 :  bally  =   - 50
   3267  faaa
   3268  faaa		       a5 84		      LDA	ballx
   3269  faac		       c9 0a		      CMP	#10
   3270  faae		       d0 08		      BNE	.skipL070
   3271  fab0				   .condpart58
   3272  fab0		       a9 00		      LDA	#0
   3273  fab2		       85 da		      STA	g
   3274  fab4		       a9 ce		      LDA	#206
   3275  fab6		       85 89		      STA	bally
   3276  fab8				   .skipL070
   3277  fab8				   .
   3278  fab8							;
   3279  fab8
   3280  fab8				   .L071		;  rem collision detection
   3281  fab8
   3282  fab8				   .L072		;  if collision(player0,player1) then score  =  score	+  1 : player0x  =  player0x  -   ( player1x  -  player0x )  : player1x  =  player1x  -   ( player0x  -  player1x )
   3283  fab8
   3284  fab8		       24 07		      bit	CXPPMM
   3285  faba		       10 39		      BPL	.skipL072
   3286  fabc				   .condpart59
   3287  fabc		       f8		      SED
   3288  fabd		       18		      CLC
   3289  fabe		       a5 95		      LDA	score+2
   3290  fac0		       69 01		      ADC	#$01
   3291  fac2		       85 95		      STA	score+2
   3292  fac4		       a5 94		      LDA	score+1
   3293  fac6		       69 00		      ADC	#$00
   3294  fac8		       85 94		      STA	score+1
   3295  faca		       a5 93		      LDA	score
   3296  facc		       69 00		      ADC	#$00
   3297  face		       85 93		      STA	score
   3298  fad0		       d8		      CLD
   3299  fad1							; complex statement detected
   3300  fad1		       a5 80		      LDA	player0x
   3301  fad3		       48		      PHA
   3302  fad4		       a5 81		      LDA	player1x
   3303  fad6		       38		      SEC
   3304  fad7		       e5 80		      SBC	player0x
   3305  fad9		       a8		      TAY
   3306  fada		       68		      PLA
   3307  fadb		       ba		      TSX
   3308  fadc		       94 00		      STY	$00,x
   3309  fade		       38		      SEC
   3310  fadf		       f5 00		      SBC	$00,x
   3311  fae1		       85 80		      STA	player0x
   3312  fae3							; complex statement detected
   3313  fae3		       a5 81		      LDA	player1x
   3314  fae5		       48		      PHA
   3315  fae6		       a5 80		      LDA	player0x
   3316  fae8		       38		      SEC
   3317  fae9		       e5 81		      SBC	player1x
   3318  faeb		       a8		      TAY
   3319  faec		       68		      PLA
   3320  faed		       ba		      TSX
   3321  faee		       94 00		      STY	$00,x
   3322  faf0		       38		      SEC
   3323  faf1		       f5 00		      SBC	$00,x
   3324  faf3		       85 81		      STA	player1x
   3325  faf5				   .skipL072
   3326  faf5				   .L073		;  if collision(player0,player1) then player0y  =  player0y  -   ( player1y  -  player0y )  : player1y  =  player1y  -   ( player0y  -  player1y )
   3327  faf5
   3328  faf5		       24 07		      bit	CXPPMM
   3329  faf7		       10 24		      BPL	.skipL073
   3330  faf9				   .condpart60
   3331  faf9							; complex statement detected
   3332  faf9		       a5 85		      LDA	player0y
   3333  fafb		       48		      PHA
   3334  fafc		       a5 86		      LDA	player1y
   3335  fafe		       38		      SEC
   3336  faff		       e5 85		      SBC	player0y
   3337  fb01		       a8		      TAY
   3338  fb02		       68		      PLA
   3339  fb03		       ba		      TSX
   3340  fb04		       94 00		      STY	$00,x
   3341  fb06		       38		      SEC
   3342  fb07		       f5 00		      SBC	$00,x
   3343  fb09		       85 85		      STA	player0y
   3344  fb0b							; complex statement detected
   3345  fb0b		       a5 86		      LDA	player1y
   3346  fb0d		       48		      PHA
   3347  fb0e		       a5 85		      LDA	player0y
   3348  fb10		       38		      SEC
   3349  fb11		       e5 86		      SBC	player1y
   3350  fb13		       a8		      TAY
   3351  fb14		       68		      PLA
   3352  fb15		       ba		      TSX
   3353  fb16		       94 00		      STY	$00,x
   3354  fb18		       38		      SEC
   3355  fb19		       f5 00		      SBC	$00,x
   3356  fb1b		       85 86		      STA	player1y
   3357  fb1d				   .skipL073
   3358  fb1d				   .
   3359  fb1d							;
   3360  fb1d
   3361  fb1d				   .L074		;  if collision(player0,ball) then bally  =   - 50 : g  =  0 : goto ponescore
   3362  fb1d
   3363  fb1d		       24 02		      bit	CXP0FB
   3364  fb1f		       50 0b		      BVC	.skipL074
   3365  fb21				   .condpart61
   3366  fb21		       a9 ce		      LDA	#206
   3367  fb23		       85 89		      STA	bally
   3368  fb25		       a9 00		      LDA	#0
   3369  fb27		       85 da		      STA	g
   3370  fb29		       4c 3e fb 	      jmp	.ponescore
   3371  fb2c
   3372  fb2c				   .skipL074
   3373  fb2c				   .L075		;  if collision(player1,ball) then bally  =   - 50 : g  =  0 : goto ptwoscore
   3374  fb2c
   3375  fb2c		       24 03		      bit	CXP1FB
   3376  fb2e		       50 0b		      BVC	.skipL075
   3377  fb30				   .condpart62
   3378  fb30		       a9 ce		      LDA	#206
   3379  fb32		       85 89		      STA	bally
   3380  fb34		       a9 00		      LDA	#0
   3381  fb36		       85 da		      STA	g
   3382  fb38		       4c 62 fb 	      jmp	.ptwoscore
   3383  fb3b
   3384  fb3b				   .skipL075
   3385  fb3b				   .
   3386  fb3b							;
   3387  fb3b
   3388  fb3b				   .L076		;  goto sprites
   3389  fb3b
   3390  fb3b		       4c 1f f5 	      jmp	.sprites
   3391  fb3e
   3392  fb3e				   .
   3393  fb3e							;
   3394  fb3e
   3395  fb3e				   .ponescore
   3396  fb3e							; ponescore
   3397  fb3e
   3398  fb3e				   .L077		;  if pfscore1  =  %11011000 then pfscore1  =	%11011011 : goto ponevictory
   3399  fb3e
   3400  fb3e		       a5 f2		      LDA	pfscore1
   3401  fb40		       c9 d8		      CMP	#%11011000
   3402  fb42		       d0 07		      BNE	.skipL077
   3403  fb44				   .condpart63
   3404  fb44		       a9 db		      LDA	#%11011011
   3405  fb46		       85 f2		      STA	pfscore1
   3406  fb48		       4c 86 fb 	      jmp	.ponevictory
   3407  fb4b
   3408  fb4b				   .skipL077
   3409  fb4b				   .L078		;  if pfscore1  =  %11000000 then pfscore1  =	%11011000
   3410  fb4b
   3411  fb4b		       a5 f2		      LDA	pfscore1
   3412  fb4d		       c9 c0		      CMP	#%11000000
   3413  fb4f		       d0 04		      BNE	.skipL078
   3414  fb51				   .condpart64
   3415  fb51		       a9 d8		      LDA	#%11011000
   3416  fb53		       85 f2		      STA	pfscore1
   3417  fb55				   .skipL078
   3418  fb55				   .L079		;  if pfscore1  =  %00000000 then pfscore1  =	%11000000
   3419  fb55
   3420  fb55		       a5 f2		      LDA	pfscore1
   3421  fb57		       c9 00		      CMP	#%00000000
   3422  fb59		       d0 04		      BNE	.skipL079
   3423  fb5b				   .condpart65
   3424  fb5b		       a9 c0		      LDA	#%11000000
   3425  fb5d		       85 f2		      STA	pfscore1
   3426  fb5f				   .skipL079
   3427  fb5f				   .
   3428  fb5f							;
   3429  fb5f
   3430  fb5f				   .L080		;  goto sprites
   3431  fb5f
   3432  fb5f		       4c 1f f5 	      jmp	.sprites
   3433  fb62
   3434  fb62				   .
   3435  fb62							;
   3436  fb62
   3437  fb62				   .ptwoscore
   3438  fb62							; ptwoscore
   3439  fb62
   3440  fb62				   .L081		;  if pfscore2  =  %11011000 then pfscore2  =	%11011011 : goto ptwovictory
   3441  fb62
   3442  fb62		       a5 f3		      LDA	pfscore2
   3443  fb64		       c9 d8		      CMP	#%11011000
   3444  fb66		       d0 07		      BNE	.skipL081
   3445  fb68				   .condpart66
   3446  fb68		       a9 db		      LDA	#%11011011
   3447  fb6a		       85 f3		      STA	pfscore2
   3448  fb6c		       4c ec fb 	      jmp	.ptwovictory
   3449  fb6f
   3450  fb6f				   .skipL081
   3451  fb6f				   .L082		;  if pfscore2  =  %11000000 then pfscore2  =	%11011000
   3452  fb6f
   3453  fb6f		       a5 f3		      LDA	pfscore2
   3454  fb71		       c9 c0		      CMP	#%11000000
   3455  fb73		       d0 04		      BNE	.skipL082
   3456  fb75				   .condpart67
   3457  fb75		       a9 d8		      LDA	#%11011000
   3458  fb77		       85 f3		      STA	pfscore2
   3459  fb79				   .skipL082
   3460  fb79				   .L083		;  if pfscore2  =  %00000000 then pfscore2  =	%11000000
   3461  fb79
   3462  fb79		       a5 f3		      LDA	pfscore2
   3463  fb7b		       c9 00		      CMP	#%00000000
   3464  fb7d		       d0 04		      BNE	.skipL083
   3465  fb7f				   .condpart68
   3466  fb7f		       a9 c0		      LDA	#%11000000
   3467  fb81		       85 f3		      STA	pfscore2
   3468  fb83				   .skipL083
   3469  fb83				   .
   3470  fb83							;
   3471  fb83
   3472  fb83				   .L084		;  goto sprites
   3473  fb83
   3474  fb83		       4c 1f f5 	      jmp	.sprites
   3475  fb86
   3476  fb86				   .
   3477  fb86							;
   3478  fb86
   3479  fb86				   .L085		;  rem victory screen for P1
   3480  fb86
   3481  fb86				   .ponevictory
   3482  fb86							; ponevictory
   3483  fb86
   3484  fb86				   .L086		;  COLUBK  =  0
   3485  fb86
   3486  fb86		       a9 00		      LDA	#0
   3487  fb88		       85 09		      STA	COLUBK
   3488  fb8a				   .L087		;  player0x  =   - 50 : player0y  =   - 50
   3489  fb8a
   3490  fb8a		       a9 ce		      LDA	#206
   3491  fb8c		       85 80		      STA	player0x
   3492  fb8e		       a9 ce		      LDA	#206
   3493  fb90		       85 85		      STA	player0y
   3494  fb92				   .L088		;  player1x  =   - 50 : player1y  =   - 50
   3495  fb92
   3496  fb92		       a9 ce		      LDA	#206
   3497  fb94		       85 81		      STA	player1x
   3498  fb96		       a9 ce		      LDA	#206
   3499  fb98		       85 86		      STA	player1y
   3500  fb9a				   .L089		;  pfcolors:
   3501  fb9a
   3502  fb9a		       a9 1c		      lda	# 28
   3503  fb9c		       85 08		      sta	COLUPF
   3504  fb9e				  -	      ifconst	pfres
   3505  fb9e				  -	      lda	#>(pfcolorlabel77-131+pfres*pfwidth)
   3506  fb9e					      else
   3507  fb9e		       a9 fc		      lda	#>(pfcolorlabel77-83)
   3508  fba0					      endif
   3509  fba0		       85 f1		      sta	pfcolortable+1
   3510  fba2				  -	      ifconst	pfres
   3511  fba2				  -	      lda	#<(pfcolorlabel77-131+pfres*pfwidth)
   3512  fba2					      else
   3513  fba2		       a9 2f		      lda	#<(pfcolorlabel77-83)
   3514  fba4					      endif
   3515  fba4		       85 f0		      sta	pfcolortable
   3516  fba6				   .L090		;  playfield:
   3517  fba6
   3518  fba6				  -	      ifconst	pfres
   3519  fba6				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   3520  fba6					      else
   3521  fba6		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   3522  fba8					      endif
   3523  fba8		       4c d7 fb 	      jmp	pflabel18
   3524  fbab				   PF_data18
   3525  fbab		       00 00		      .byte.b	%00000000, %00000000
   3526  fbad					      if	(pfwidth>2)
   3527  fbad		       00 00		      .byte.b	%00000000, %00000000
   3528  fbaf					      endif
   3529  fbaf		       c4 88		      .byte.b	%11000100, %10001000
   3530  fbb1					      if	(pfwidth>2)
   3531  fbb1		       1c 13		      .byte.b	%00011100, %00010011
   3532  fbb3					      endif
   3533  fbb3		       ac 88		      .byte.b	%10101100, %10001000
   3534  fbb5					      if	(pfwidth>2)
   3535  fbb5		       08 15		      .byte.b	%00001000, %00010101
   3536  fbb7					      endif
   3537  fbb7		       a4 88		      .byte.b	%10100100, %10001000
   3538  fbb9					      if	(pfwidth>2)
   3539  fbb9		       08 15		      .byte.b	%00001000, %00010101
   3540  fbbb					      endif
   3541  fbbb		       c4 a8		      .byte.b	%11000100, %10101000
   3542  fbbd					      if	(pfwidth>2)
   3543  fbbd		       08 15		      .byte.b	%00001000, %00010101
   3544  fbbf					      endif
   3545  fbbf		       84 d8		      .byte.b	%10000100, %11011000
   3546  fbc1					      if	(pfwidth>2)
   3547  fbc1		       08 19		      .byte.b	%00001000, %00011001
   3548  fbc3					      endif
   3549  fbc3		       8e 88		      .byte.b	%10001110, %10001000
   3550  fbc5					      if	(pfwidth>2)
   3551  fbc5		       1c 11		      .byte.b	%00011100, %00010001
   3552  fbc7					      endif
   3553  fbc7		       00 00		      .byte.b	%00000000, %00000000
   3554  fbc9					      if	(pfwidth>2)
   3555  fbc9		       00 00		      .byte.b	%00000000, %00000000
   3556  fbcb					      endif
   3557  fbcb		       00 00		      .byte.b	%00000000, %00000000
   3558  fbcd					      if	(pfwidth>2)
   3559  fbcd		       00 00		      .byte.b	%00000000, %00000000
   3560  fbcf					      endif
   3561  fbcf		       00 00		      .byte.b	%00000000, %00000000
   3562  fbd1					      if	(pfwidth>2)
   3563  fbd1		       00 00		      .byte.b	%00000000, %00000000
   3564  fbd3					      endif
   3565  fbd3		       00 00		      .byte.b	%00000000, %00000000
   3566  fbd5					      if	(pfwidth>2)
   3567  fbd5		       00 00		      .byte.b	%00000000, %00000000
   3568  fbd7					      endif
   3569  fbd7				   pflabel18
   3570  fbd7		       bd ab fb 	      lda	PF_data18,x
   3571  fbda		       95 a4		      sta	playfield,x
   3572  fbdc		       ca		      dex
   3573  fbdd		       10 f8		      bpl	pflabel18
   3574  fbdf				   .L091		;  drawscreen
   3575  fbdf
   3576  fbdf		       20 bd f3 	      jsr	drawscreen
   3577  fbe2				   .L092		;  if joy0fire then goto startscreen
   3578  fbe2
   3579  fbe2		       24 0c		      bit	INPT4
   3580  fbe4		       30 03		      BMI	.skipL092
   3581  fbe6				   .condpart69
   3582  fbe6		       4c 85 f4 	      jmp	.startscreen
   3583  fbe9
   3584  fbe9				   .skipL092
   3585  fbe9				   .L093		;  goto ponevictory
   3586  fbe9
   3587  fbe9		       4c 86 fb 	      jmp	.ponevictory
   3588  fbec
   3589  fbec				   .
   3590  fbec							;
   3591  fbec
   3592  fbec				   .L094		;  rem victory screen for P2
   3593  fbec
   3594  fbec				   .ptwovictory
   3595  fbec							; ptwovictory
   3596  fbec
   3597  fbec				   .L095		;  COLUBK  =  0
   3598  fbec
   3599  fbec		       a9 00		      LDA	#0
   3600  fbee		       85 09		      STA	COLUBK
   3601  fbf0				   .L096		;  player0x  =   - 50 : player0y  =   - 50
   3602  fbf0
   3603  fbf0		       a9 ce		      LDA	#206
   3604  fbf2		       85 80		      STA	player0x
   3605  fbf4		       a9 ce		      LDA	#206
   3606  fbf6		       85 85		      STA	player0y
   3607  fbf8				   .L097		;  player1x  =   - 50 : player1y  =   - 50
   3608  fbf8
   3609  fbf8		       a9 ce		      LDA	#206
   3610  fbfa		       85 81		      STA	player1x
   3611  fbfc		       a9 ce		      LDA	#206
   3612  fbfe		       85 86		      STA	player1y
   3613  fc00				   .L098		;  pfcolors:
   3614  fc00
   3615  fc00		       a9 1c		      lda	# 28
   3616  fc02		       85 08		      sta	COLUPF
   3617  fc04				  -	      ifconst	pfres
   3618  fc04				  -	      lda	#>(pfcolorlabel77-130+pfres*pfwidth)
   3619  fc04					      else
   3620  fc04		       a9 fc		      lda	#>(pfcolorlabel77-82)
   3621  fc06					      endif
   3622  fc06		       85 f1		      sta	pfcolortable+1
   3623  fc08				  -	      ifconst	pfres
   3624  fc08				  -	      lda	#<(pfcolorlabel77-130+pfres*pfwidth)
   3625  fc08					      else
   3626  fc08		       a9 30		      lda	#<(pfcolorlabel77-82)
   3627  fc0a					      endif
   3628  fc0a		       85 f0		      sta	pfcolortable
   3629  fc0c				   .L099		;  playfield:
   3630  fc0c
   3631  fc0c				  -	      ifconst	pfres
   3632  fc0c				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   3633  fc0c					      else
   3634  fc0c		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   3635  fc0e					      endif
   3636  fc0e		       4c 3d fc 	      jmp	pflabel19
   3637  fc11				   PF_data19
   3638  fc11		       00 00		      .byte.b	%00000000, %00000000
   3639  fc13					      if	(pfwidth>2)
   3640  fc13		       00 00		      .byte.b	%00000000, %00000000
   3641  fc15					      endif
   3642  fc15		       c4 88		      .byte.b	%11000100, %10001000
   3643  fc17					      if	(pfwidth>2)
   3644  fc17		       1c 13		      .byte.b	%00011100, %00010011
   3645  fc19					      endif
   3646  fc19		       aa 88		      .byte.b	%10101010, %10001000
   3647  fc1b					      if	(pfwidth>2)
   3648  fc1b		       08 15		      .byte.b	%00001000, %00010101
   3649  fc1d					      endif
   3650  fc1d		       a2 88		      .byte.b	%10100010, %10001000
   3651  fc1f					      if	(pfwidth>2)
   3652  fc1f		       08 15		      .byte.b	%00001000, %00010101
   3653  fc21					      endif
   3654  fc21		       c4 a8		      .byte.b	%11000100, %10101000
   3655  fc23					      if	(pfwidth>2)
   3656  fc23		       08 15		      .byte.b	%00001000, %00010101
   3657  fc25					      endif
   3658  fc25		       88 d8		      .byte.b	%10001000, %11011000
   3659  fc27					      if	(pfwidth>2)
   3660  fc27		       08 19		      .byte.b	%00001000, %00011001
   3661  fc29					      endif
   3662  fc29		       8e 88		      .byte.b	%10001110, %10001000
   3663  fc2b					      if	(pfwidth>2)
   3664  fc2b		       1c 11		      .byte.b	%00011100, %00010001
   3665  fc2d					      endif
   3666  fc2d		       00 00		      .byte.b	%00000000, %00000000
   3667  fc2f					      if	(pfwidth>2)
   3668  fc2f		       00 00		      .byte.b	%00000000, %00000000
   3669  fc31					      endif
   3670  fc31		       00 00		      .byte.b	%00000000, %00000000
   3671  fc33					      if	(pfwidth>2)
   3672  fc33		       00 00		      .byte.b	%00000000, %00000000
   3673  fc35					      endif
   3674  fc35		       00 00		      .byte.b	%00000000, %00000000
   3675  fc37					      if	(pfwidth>2)
   3676  fc37		       00 00		      .byte.b	%00000000, %00000000
   3677  fc39					      endif
   3678  fc39		       00 00		      .byte.b	%00000000, %00000000
   3679  fc3b					      if	(pfwidth>2)
   3680  fc3b		       00 00		      .byte.b	%00000000, %00000000
   3681  fc3d					      endif
   3682  fc3d				   pflabel19
   3683  fc3d		       bd 11 fc 	      lda	PF_data19,x
   3684  fc40		       95 a4		      sta	playfield,x
   3685  fc42		       ca		      dex
   3686  fc43		       10 f8		      bpl	pflabel19
   3687  fc45				   .L0100		;  drawscreen
   3688  fc45
   3689  fc45		       20 bd f3 	      jsr	drawscreen
   3690  fc48				   .L0101		;  if joy0fire then goto startscreen
   3691  fc48
   3692  fc48		       24 0c		      bit	INPT4
   3693  fc4a		       30 03		      BMI	.skipL0101
   3694  fc4c				   .condpart70
   3695  fc4c		       4c 85 f4 	      jmp	.startscreen
   3696  fc4f
   3697  fc4f				   .skipL0101
   3698  fc4f				   .L0102		;  goto ptwovictory
   3699  fc4f		       4c ec fb 	      jmp	.ptwovictory
   3700  fc52				  -	      if	(<*) > (<(*+11))
   3701  fc52				  -	      repeat	($100-<*)
   3702  fc52				  -	      .byte	0
   3703  fc52				  -	      repend
   3704  fc52					      endif
   3705  fc52				   playerL05_0
   3706  fc52		       c3		      .byte.b	%11000011
   3707  fc53		       c3		      .byte.b	%11000011
   3708  fc54		       c3		      .byte.b	%11000011
   3709  fc55		       ff		      .byte.b	%11111111
   3710  fc56		       ff		      .byte.b	%11111111
   3711  fc57		       ff		      .byte.b	%11111111
   3712  fc58		       ff		      .byte.b	%11111111
   3713  fc59		       ff		      .byte.b	%11111111
   3714  fc5a		       ff		      .byte.b	%11111111
   3715  fc5b		       c3		      .byte.b	%11000011
   3716  fc5c		       c3		      .byte.b	%11000011
   3717  fc5d		       c3		      .byte.b	%11000011
   3718  fc5e				  -	      if	(<*) > (<(*+11))
   3719  fc5e				  -	      repeat	($100-<*)
   3720  fc5e				  -	      .byte	0
   3721  fc5e				  -	      repend
   3722  fc5e					      endif
   3723  fc5e				   playercolorL06_0
   3724  fc5e		       02		      .byte.b	$02	;
   3725  fc5f		       02		      .byte.b	$02	;
   3726  fc60		       f6		      .byte.b	$F6	;
   3727  fc61		       f6		      .byte.b	$F6	;
   3728  fc62		       0c		      .byte.b	$0C	;
   3729  fc63		       a0		      .byte.b	$A0	;
   3730  fc64		       a0		      .byte.b	$A0	;
   3731  fc65		       0e		      .byte.b	$0E	;
   3732  fc66		       f6		      .byte.b	$F6	;
   3733  fc67		       f6		      .byte.b	$F6	;
   3734  fc68		       02		      .byte.b	$02	;
   3735  fc69		       02		      .byte.b	$02	;
   3736  fc6a				  -	      if	(<*) > (<(*+11))
   3737  fc6a				  -	      repeat	($100-<*)
   3738  fc6a				  -	      .byte	0
   3739  fc6a				  -	      repend
   3740  fc6a					      endif
   3741  fc6a				   playerL07_1
   3742  fc6a		       c3		      .byte.b	%11000011
   3743  fc6b		       c3		      .byte.b	%11000011
   3744  fc6c		       c3		      .byte.b	%11000011
   3745  fc6d		       ff		      .byte.b	%11111111
   3746  fc6e		       ff		      .byte.b	%11111111
   3747  fc6f		       ff		      .byte.b	%11111111
   3748  fc70		       ff		      .byte.b	%11111111
   3749  fc71		       ff		      .byte.b	%11111111
   3750  fc72		       ff		      .byte.b	%11111111
   3751  fc73		       c3		      .byte.b	%11000011
   3752  fc74		       c3		      .byte.b	%11000011
   3753  fc75		       c3		      .byte.b	%11000011
   3754  fc76				  -	      if	(<*) > (<(*+11))
   3755  fc76				  -	      repeat	($100-<*)
   3756  fc76				  -	      .byte	0
   3757  fc76				  -	      repend
   3758  fc76					      endif
   3759  fc76				   playercolorL08_1
   3760  fc76		       02		      .byte.b	$02	;
   3761  fc77		       02		      .byte.b	$02	;
   3762  fc78		       40		      .byte.b	$40	;
   3763  fc79		       40		      .byte.b	$40	;
   3764  fc7a		       0c		      .byte.b	$0C	;
   3765  fc7b		       00		      .byte.b	$00	;
   3766  fc7c		       00		      .byte.b	$00	;
   3767  fc7d		       0e		      .byte.b	$0E	;
   3768  fc7e		       40		      .byte.b	$40	;
   3769  fc7f		       40		      .byte.b	$40	;
   3770  fc80		       02		      .byte.b	$02	;
   3771  fc81		       02		      .byte.b	$02	;
   3772  fc82				  -	      ifconst	pfres
   3773  fc82				  -	      if	(<*) > (254-pfres*pfwidth)
   3774  fc82				  -	      align	256
   3775  fc82				  -	      endif
   3776  fc82				  -	      if	(<*) < (136-pfres*pfwidth)
   3777  fc82				  -	      repeat	((136-pfres*pfwidth)-(<*))
   3778  fc82				  -	      .byte	0
   3779  fc82				  -	      repend
   3780  fc82				  -	      endif
   3781  fc82					      else
   3782  fc82				  -	      if	(<*) > 206
   3783  fc82				  -	      align	256
   3784  fc82					      endif
   3785  fc82				  -	      if	(<*) < 88
   3786  fc82				  -	      repeat	(88-(<*))
   3787  fc82				  -	      .byte	0
   3788  fc82				  -	      repend
   3789  fc82					      endif
   3790  fc82					      endif
   3791  fc82				   pfcolorlabel77
   3792  fc82		       c4 1c 1c 00	      .byte.b	196, 28, 28,0
   3793  fc86		       1c 1c 1c 00	      .byte.b	28, 28, 28,0
   3794  fc8a		       1c 1c 1c 00	      .byte.b	28, 28, 28,0
   3795  fc8e		       1c 1c 1c 00	      .byte.b	28, 28, 28,0
   3796  fc92		       1c 1c 1c 00	      .byte.b	28, 28, 28,0
   3797  fc96		       1c 1c 1c 00	      .byte.b	28, 28, 28,0
   3798  fc9a		       1c 1c 1c 00	      .byte.b	28, 28, 28,0
   3799  fc9e		       1c 1c 1c 00	      .byte.b	28, 28, 28,0
   3800  fca2		       c4 1c 1c 00	      .byte.b	196, 28, 28,0
   3801  fca6		       c4 1c 1c 00	      .byte.b	196, 28, 28,0
   3802  fcaa		       06 1c 1c 00	      .byte.b	6, 28, 28,0
   3803  fcae					      if	ECHOFIRST
      750 bytes of ROM space left
   3804  fcae					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   3805  fcae					      endif
   3806  fcae		       00 01	   ECHOFIRST  =	1
   3807  fcae
   3808  fcae
   3809  fcae
   3810  fcae							; feel free to modify the score graphics - just keep each digit 8 high
   3811  fcae							; and keep the conditional compilation stuff intact
   3812  fcae				  -	      ifconst	ROM2k
   3813  fcae				  -	      ORG	$F7AC-8
   3814  fcae					      else
   3815  fcae				  -	      ifconst	bankswitch
   3816  fcae				  -	      if	bankswitch == 8
   3817  fcae				  -	      ORG	$2F94-bscode_length
   3818  fcae				  -	      RORG	$FF94-bscode_length
   3819  fcae				  -	      endif
   3820  fcae				  -	      if	bankswitch == 16
   3821  fcae				  -	      ORG	$4F94-bscode_length
   3822  fcae				  -	      RORG	$FF94-bscode_length
   3823  fcae				  -	      endif
   3824  fcae				  -	      if	bankswitch == 32
   3825  fcae				  -	      ORG	$8F94-bscode_length
   3826  fcae				  -	      RORG	$FF94-bscode_length
   3827  fcae				  -	      endif
   3828  fcae				  -	      if	bankswitch == 64
   3829  fcae				  -	      ORG	$10F80-bscode_length
   3830  fcae				  -	      RORG	$1FF80-bscode_length
   3831  fcae				  -	      endif
   3832  fcae					      else
   3833  ff9c					      ORG	$FF9C
   3834  ff9c					      endif
   3835  ff9c					      endif
   3836  ff9c
   3837  ff9c							; font equates
   3838  ff9c		       00 01	   .21stcentury =	1
   3839  ff9c		       00 02	   alarmclock =	2
   3840  ff9c		       00 03	   handwritten =	3
   3841  ff9c		       00 04	   interrupted =	4
   3842  ff9c		       00 05	   retroputer =	5
   3843  ff9c		       00 06	   whimsey    =	6
   3844  ff9c		       00 07	   tiny       =	7
   3845  ff9c
   3846  ff9c				   scoretable
   3847  ff9c
   3848  ff9c				  -	      ifconst	font
   3849  ff9c				  -	      if	font == .21stcentury
   3850  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   3851  ff9c				  -	      endif
   3852  ff9c				  -	      if	font == alarmclock
   3853  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   3854  ff9c				  -	      endif
   3855  ff9c				  -	      if	font == handwritten
   3856  ff9c				  -	      include	"score_graphics.asm.handwritten"
   3857  ff9c				  -	      endif
   3858  ff9c				  -	      if	font == interrupted
   3859  ff9c				  -	      include	"score_graphics.asm.interrupted"
   3860  ff9c				  -	      endif
   3861  ff9c				  -	      if	font == retroputer
   3862  ff9c				  -	      include	"score_graphics.asm.retroputer"
   3863  ff9c				  -	      endif
   3864  ff9c				  -	      if	font == whimsey
   3865  ff9c				  -	      include	"score_graphics.asm.whimsey"
   3866  ff9c				  -	      endif
   3867  ff9c				  -	      if	font == tiny
   3868  ff9c				  -	      include	"score_graphics.asm.tiny"
   3869  ff9c				  -	      endif
   3870  ff9c					      else		; default font
   3871  ff9c
   3872  ff9c		       3c		      .byte.b	%00111100
   3873  ff9d		       66		      .byte.b	%01100110
   3874  ff9e		       66		      .byte.b	%01100110
   3875  ff9f		       66		      .byte.b	%01100110
   3876  ffa0		       66		      .byte.b	%01100110
   3877  ffa1		       66		      .byte.b	%01100110
   3878  ffa2		       66		      .byte.b	%01100110
   3879  ffa3		       3c		      .byte.b	%00111100
   3880  ffa4
   3881  ffa4		       7e		      .byte.b	%01111110
   3882  ffa5		       18		      .byte.b	%00011000
   3883  ffa6		       18		      .byte.b	%00011000
   3884  ffa7		       18		      .byte.b	%00011000
   3885  ffa8		       18		      .byte.b	%00011000
   3886  ffa9		       38		      .byte.b	%00111000
   3887  ffaa		       18		      .byte.b	%00011000
   3888  ffab		       08		      .byte.b	%00001000
   3889  ffac
   3890  ffac		       7e		      .byte.b	%01111110
   3891  ffad		       60		      .byte.b	%01100000
   3892  ffae		       60		      .byte.b	%01100000
   3893  ffaf		       3c		      .byte.b	%00111100
   3894  ffb0		       06		      .byte.b	%00000110
   3895  ffb1		       06		      .byte.b	%00000110
   3896  ffb2		       46		      .byte.b	%01000110
   3897  ffb3		       3c		      .byte.b	%00111100
   3898  ffb4
   3899  ffb4		       3c		      .byte.b	%00111100
   3900  ffb5		       46		      .byte.b	%01000110
   3901  ffb6		       06		      .byte.b	%00000110
   3902  ffb7		       06		      .byte.b	%00000110
   3903  ffb8		       1c		      .byte.b	%00011100
   3904  ffb9		       06		      .byte.b	%00000110
   3905  ffba		       46		      .byte.b	%01000110
   3906  ffbb		       3c		      .byte.b	%00111100
   3907  ffbc
   3908  ffbc		       0c		      .byte.b	%00001100
   3909  ffbd		       0c		      .byte.b	%00001100
   3910  ffbe		       7e		      .byte.b	%01111110
   3911  ffbf		       4c		      .byte.b	%01001100
   3912  ffc0		       4c		      .byte.b	%01001100
   3913  ffc1		       2c		      .byte.b	%00101100
   3914  ffc2		       1c		      .byte.b	%00011100
   3915  ffc3		       0c		      .byte.b	%00001100
   3916  ffc4
   3917  ffc4		       3c		      .byte.b	%00111100
   3918  ffc5		       46		      .byte.b	%01000110
   3919  ffc6		       06		      .byte.b	%00000110
   3920  ffc7		       06		      .byte.b	%00000110
   3921  ffc8		       3c		      .byte.b	%00111100
   3922  ffc9		       60		      .byte.b	%01100000
   3923  ffca		       60		      .byte.b	%01100000
   3924  ffcb		       7e		      .byte.b	%01111110
   3925  ffcc
   3926  ffcc		       3c		      .byte.b	%00111100
   3927  ffcd		       66		      .byte.b	%01100110
   3928  ffce		       66		      .byte.b	%01100110
   3929  ffcf		       66		      .byte.b	%01100110
   3930  ffd0		       7c		      .byte.b	%01111100
   3931  ffd1		       60		      .byte.b	%01100000
   3932  ffd2		       62		      .byte.b	%01100010
   3933  ffd3		       3c		      .byte.b	%00111100
   3934  ffd4
   3935  ffd4		       30		      .byte.b	%00110000
   3936  ffd5		       30		      .byte.b	%00110000
   3937  ffd6		       30		      .byte.b	%00110000
   3938  ffd7		       18		      .byte.b	%00011000
   3939  ffd8		       0c		      .byte.b	%00001100
   3940  ffd9		       06		      .byte.b	%00000110
   3941  ffda		       42		      .byte.b	%01000010
   3942  ffdb		       3e		      .byte.b	%00111110
   3943  ffdc
   3944  ffdc		       3c		      .byte.b	%00111100
   3945  ffdd		       66		      .byte.b	%01100110
   3946  ffde		       66		      .byte.b	%01100110
   3947  ffdf		       66		      .byte.b	%01100110
   3948  ffe0		       3c		      .byte.b	%00111100
   3949  ffe1		       66		      .byte.b	%01100110
   3950  ffe2		       66		      .byte.b	%01100110
   3951  ffe3		       3c		      .byte.b	%00111100
   3952  ffe4
   3953  ffe4		       3c		      .byte.b	%00111100
   3954  ffe5		       46		      .byte.b	%01000110
   3955  ffe6		       06		      .byte.b	%00000110
   3956  ffe7		       3e		      .byte.b	%00111110
   3957  ffe8		       66		      .byte.b	%01100110
   3958  ffe9		       66		      .byte.b	%01100110
   3959  ffea		       66		      .byte.b	%01100110
   3960  ffeb		       3c		      .byte.b	%00111100
   3961  ffec
   3962  ffec					      ifnconst	DPC_kernel_options
   3963  ffec
   3964  ffec		       00		      .byte.b	%00000000
   3965  ffed		       00		      .byte.b	%00000000
   3966  ffee		       00		      .byte.b	%00000000
   3967  ffef		       00		      .byte.b	%00000000
   3968  fff0		       00		      .byte.b	%00000000
   3969  fff1		       00		      .byte.b	%00000000
   3970  fff2		       00		      .byte.b	%00000000
   3971  fff3		       00		      .byte.b	%00000000
   3972  fff4
   3973  fff4					      endif
   3974  fff4
   3975  fff4					      endif
   3976  fff4
   3977  fff4				  -	      ifconst	ROM2k
   3978  fff4				  -	      ORG	$F7FC
   3979  fff4					      else
   3980  fff4				  -	      ifconst	bankswitch
   3981  fff4				  -	      if	bankswitch == 8
   3982  fff4				  -	      ORG	$2FF4-bscode_length
   3983  fff4				  -	      RORG	$FFF4-bscode_length
   3984  fff4				  -	      endif
   3985  fff4				  -	      if	bankswitch == 16
   3986  fff4				  -	      ORG	$4FF4-bscode_length
   3987  fff4				  -	      RORG	$FFF4-bscode_length
   3988  fff4				  -	      endif
   3989  fff4				  -	      if	bankswitch == 32
   3990  fff4				  -	      ORG	$8FF4-bscode_length
   3991  fff4				  -	      RORG	$FFF4-bscode_length
   3992  fff4				  -	      endif
   3993  fff4				  -	      if	bankswitch == 64
   3994  fff4				  -	      ORG	$10FE0-bscode_length
   3995  fff4				  -	      RORG	$1FFE0-bscode_length
   3996  fff4				  -	      endif
   3997  fff4					      else
   3998  fffc					      ORG	$FFFC
   3999  fffc					      endif
   4000  fffc					      endif
   4001  fffc				  -	      ifconst	bankswitch
   4002  fffc				  -	      if	bankswitch == 8
   4003  fffc				  -	      ORG	$2FFC
   4004  fffc				  -	      RORG	$FFFC
   4005  fffc				  -	      endif
   4006  fffc				  -	      if	bankswitch == 16
   4007  fffc				  -	      ORG	$4FFC
   4008  fffc				  -	      RORG	$FFFC
   4009  fffc				  -	      endif
   4010  fffc				  -	      if	bankswitch == 32
   4011  fffc				  -	      ORG	$8FFC
   4012  fffc				  -	      RORG	$FFFC
   4013  fffc				  -	      endif
   4014  fffc				  -	      if	bankswitch == 64
   4015  fffc				  -	      ORG	$10FF0
   4016  fffc				  -	      RORG	$1FFF0
   4017  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   4018  fffc				  -	      ORG	$10FF8
   4019  fffc				  -	      RORG	$1FFF8
   4020  fffc				  -	      ifconst	superchip
   4021  fffc				  -	      .byte	"E","F","S","C"
   4022  fffc				  -	      else
   4023  fffc				  -	      .byte	"E","F","E","F"
   4024  fffc				  -	      endif
   4025  fffc				  -	      ORG	$10FFC
   4026  fffc				  -	      RORG	$1FFFC
   4027  fffc				  -	      endif
   4028  fffc					      else
   4029  fffc				  -	      ifconst	ROM2k
   4030  fffc				  -	      ORG	$F7FC
   4031  fffc					      else
   4032  fffc					      ORG	$FFFC
   4033  fffc					      endif
   4034  fffc					      endif
   4035  fffc		       00 f0		      .word.w	start
   4036  fffe		       00 f0		      .word.w	start
